{"version":3,"file":"webgldrawing.js","sources":["../../node_modules/twgl.js/dist/4.x/twgl-full.module.js","../../src/renderers/helpers.js","../../src/renderers/matrices.js","../../src/renderers/Camera.js","../../src/renderers/ViewFrame2D.js","../../src/geometry/Mesh2D.js","../../src/components/ui/playbar/helpers.js","../../src/components/ui/playbar/PlayButton.js","../../src/components/ui/playbar/PlayBarAnnotation.js","../../src/components/ui/playbar/PlayBar.js","../../src/components/ui/playbar/PlayControls.js","../../src/components/ui/commenting/src/helpers.js","../../src/components/ui/commenting/src/AddCommentForm.js","../../src/components/ui/commenting/src/Comment.js","../../src/components/ui/commenting/src/ReplyComment.js","../../src/components/ui/commenting/src/GeneralComment.js","../../src/components/ui/commenting/src/DiscussionSelector.js","../../src/components/ui/commenting/src/CommentingManager.js","../../src/components/ui/playbar/ChapterForm.js","../../src/components/ui/InteractivePlayerUI.js","../../src/renderers/UnsteadyPlayer2D.js","../../src/renderers/MeshRenderer2D.js","../../src/components/arrangement/dragging.js","../../src/components/arrangement/treenavigation/helpers.js","../../src/components/arrangement/treenavigation/DrawLink.js","../../src/components/arrangement/treenavigation/TreeBundle.js","../../src/components/arrangement/treenavigation/TreeLevel.js","../../src/components/arrangement/treenavigation/dimensioning.js","../../src/components/arrangement/treenavigation/TreeNode.js","../../src/components/arrangement/treenavigation/hierarchy.js","../../src/components/arrangement/treenavigation/TreeHierarchy.js","../../src/components/arrangement/treenavigation/TreeRender.js","../../src/components/arrangement/helpers.js","../../src/components/arrangement/Group.js","../../src/components/arrangement/GroupingCoordinator.js","../../src/components/KnowledgeManager.js","../../src/main.js"],"sourcesContent":["/* @license twgl.js 4.19.2 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\n\nlet VecType = Float32Array;\n\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\nfunction setDefaultType(ctor) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\nfunction create(x, y, z) {\n  const dst = new VecType(3);\n  if (x) {\n    dst[0] = x;\n  }\n  if (y) {\n    dst[1] = y;\n  }\n  if (z) {\n    dst[2] = z;\n  }\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\nfunction dot(a, b) {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distance(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n\n  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  const len = Math.sqrt(lenSq);\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\nfunction negate(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\nfunction copy(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy,\n  create: create,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply,\n  negate: negate,\n  normalize: normalize,\n  setDefaultType: setDefaultType,\n  subtract: subtract\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nlet MatType = Float32Array;\n\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\nfunction setDefaultType$1(ctor) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\nfunction negate$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];\n  dst[ 1] = -m[ 1];\n  dst[ 2] = -m[ 2];\n  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];\n  dst[ 5] = -m[ 5];\n  dst[ 6] = -m[ 6];\n  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];\n  dst[ 9] = -m[ 9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\nfunction copy$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];\n  dst[ 1] = m[ 1];\n  dst[ 2] = m[ 2];\n  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];\n  dst[ 5] = m[ 5];\n  dst[ 6] = m[ 6];\n  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];\n  dst[ 9] = m[ 9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n function transpose(m, dst) {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;\n  dst[ 1] = m10;\n  dst[ 2] = m20;\n  dst[ 3] = m30;\n  dst[ 4] = m01;\n  dst[ 5] = m11;\n  dst[ 6] = m21;\n  dst[ 7] = m31;\n  dst[ 8] = m02;\n  dst[ 9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp_0  = m22 * m33;\n  const tmp_1  = m32 * m23;\n  const tmp_2  = m12 * m33;\n  const tmp_3  = m32 * m13;\n  const tmp_4  = m12 * m23;\n  const tmp_5  = m22 * m13;\n  const tmp_6  = m02 * m33;\n  const tmp_7  = m32 * m03;\n  const tmp_8  = m02 * m23;\n  const tmp_9  = m22 * m03;\n  const tmp_10 = m02 * m13;\n  const tmp_11 = m12 * m03;\n  const tmp_12 = m20 * m31;\n  const tmp_13 = m30 * m21;\n  const tmp_14 = m10 * m31;\n  const tmp_15 = m30 * m11;\n  const tmp_16 = m10 * m21;\n  const tmp_17 = m20 * m11;\n  const tmp_18 = m00 * m31;\n  const tmp_19 = m30 * m01;\n  const tmp_20 = m00 * m21;\n  const tmp_21 = m20 * m01;\n  const tmp_22 = m00 * m11;\n  const tmp_23 = m10 * m01;\n\n  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\nfunction multiply$1(a, b, dst) {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\nfunction getTranslation(m, dst) {\n  dst = dst || create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\nfunction getAxis(m, axis, dst) {\n  dst = dst || create();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy$1(a, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  const rangeInv = 1.0 / (zNear - zFar);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\nlet xAxis;\nlet yAxis;\nlet zAxis;\n\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || create();\n  yAxis = yAxis || create();\n  zAxis = zAxis || create();\n\n  normalize(\n      subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];\n  dst[ 1] = xAxis[1];\n  dst[ 2] = xAxis[2];\n  dst[ 3] = 0;\n  dst[ 4] = yAxis[0];\n  dst[ 5] = yAxis[1];\n  dst[ 6] = yAxis[2];\n  dst[ 7] = 0;\n  dst[ 8] = zAxis[0];\n  dst[ 9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = c;\n  dst[ 6] = s;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = 0;\n  dst[ 2] = -s;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = s;\n  dst[ 9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = s;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = -s;\n  dst[ 5] = c;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = v[1];\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || create();\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\nfunction transformNormal(m, v, dst) {\n  dst = dst || create();\n  const mi = inverse(m);\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy$1,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply$1,\n  negate: negate$1,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType$1,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\nconst BYTE                           = 0x1400;\nconst UNSIGNED_BYTE                  = 0x1401;\nconst SHORT                          = 0x1402;\nconst UNSIGNED_SHORT                 = 0x1403;\nconst INT                            = 0x1404;\nconst UNSIGNED_INT                   = 0x1405;\nconst FLOAT                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE]                           = Int8Array;\n  tt[UNSIGNED_BYTE]                  = Uint8Array;\n  tt[SHORT]                          = Int16Array;\n  tt[UNSIGNED_SHORT]                 = Uint16Array;\n  tt[INT]                            = Int32Array;\n  tt[UNSIGNED_INT]                   = Uint32Array;\n  tt[FLOAT]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;\n  tt[HALF_FLOAT]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error(...args) {\n  console.error(...args);\n}\n\nfunction warn(...args) {\n  console.warn(...args);\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;\n}\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE$1                         = 0x1400;\nconst UNSIGNED_BYTE$1                = 0x1401;\nconst SHORT$1                        = 0x1402;\nconst UNSIGNED_SHORT$1               = 0x1403;\nconst INT$1                          = 0x1404;\nconst UNSIGNED_INT$1                 = 0x1405;\nconst FLOAT$1                        = 0x1406;\nconst defaults = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let buffer;\n        let type;\n        let normalization;\n        let numComponents;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          const numValues = array.data || array;\n          const arrayType = array.type || Float32Array;\n          const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(ARRAY_BUFFER, buffer);\n          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n        } else {\n          const typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE$1)  return 1;  // eslint-disable-line\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT$1) return 2;  // eslint-disable-line\n  if (type === INT$1)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT$1)   return 4;  // eslint-disable-line\n  if (type === FLOAT$1)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray(array).length;\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults,\n  getNumComponents_: getNumComponents,\n  getArray_: getArray\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst getArray$1 = getArray;  // eslint-disable-line\nconst getNumComponents$1 = getNumComponents;  // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\nfunction augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function() {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (value instanceof Array || isArrayBuffer(value)) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function(opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function() {\n      return this.length / this.numComponents | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\nfunction deindexVertices(vertices) {\n  const indices = vertices.indices;\n  const newVertices = {};\n  const numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    const srcBuffer = vertices[channel];\n    const numComponents = srcBuffer.numComponents;\n    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n    for (let ii = 0; ii < numElements; ++ii) {\n      const ndx = indices[ii];\n      const offset = ndx * numComponents;\n      for (let jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n  return newVertices;\n}\n\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  const normals = vertices.normal;\n  const numNormals = normals.length;\n  for (let ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    const nax = normals[ii + 0];\n    const nay = normals[ii + 1];\n    const naz = normals[ii + 2];\n\n    const nbx = normals[ii + 3];\n    const nby = normals[ii + 4];\n    const nbz = normals[ii + 5];\n\n    const ncx = normals[ii + 6];\n    const ncy = normals[ii + 7];\n    const ncz = normals[ii + 8];\n\n    // add them\n    let nx = nax + nbx + ncx;\n    let ny = nay + nby + ncy;\n    let nz = naz + nbz + ncz;\n\n    // normalize them\n    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= length;\n    ny /= length;\n    nz /= length;\n\n    // copy them back in\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  const len = array.length;\n  const tmp = new Float32Array(3);\n  for (let ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii    ] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal$1(mi, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal$1);\n  return array;\n}\n\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function(name) {\n    const array = arrays[name];\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  };\n}\n\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createPlaneVertices(\n    width,\n    depth,\n    subdivisionsWidth,\n    subdivisionsDepth,\n    matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  const arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  }, matrix);\n  return arrays;\n}\n\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createSphereVertices(\n    radius,\n    subdivisionsAxis,\n    subdivisionsHeight,\n    opt_startLatitudeInRadians,\n    opt_endLatitudeInRadians,\n    opt_startLongitudeInRadians,\n    opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);\n\n  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + opt_startLongitudeInRadians;\n      const phi = latRange * v + opt_startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createCubeVertices(size) {\n  size = size || 1;\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTruncatedConeVertices(\n    bottomRadius,\n    topRadius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    opt_topCap,\n    opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const topCap = (opt_topCap === undefined) ? true : opt_topCap;\n  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  const data = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction create3DFVertices() {\n\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2,  numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n function createCrescentVertices(\n    verticalRadius,\n    outerRadius,\n    innerRadius,\n    thickness,\n    subdivisionsDown,\n    startOffset,\n    endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset   = endOffset || 1;\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = add(multiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */\nfunction createCylinderVertices(\n    radius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    topCap,\n    bottomCap) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTorusVertices(\n    radius,\n    thickness,\n    radialSubdivisions,\n    bodySubdivisions,\n    startAngle,\n    endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createDiscVertices(\n    radius,\n    divisions,\n    stacks,\n    innerRadius,\n    stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0;\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  const numElements = vertices.position.numElements;\n  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n  const rand = options.rand || function(ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n  vertices.color = vColors;\n  if (vertices.indices) {\n    // just make random colors if index\n    for (let ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    const numVertsPerColor = options.vertsPerColor || 3;\n    const numSets = numElements / numVertsPerColor;\n    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line\n      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n      for (let jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n  return vertices;\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\nfunction createBufferFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\nfunction createBufferInfoFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nconst arraySpecPropertyNames = [\n  \"numComponents\",\n  \"size\",\n  \"type\",\n  \"normalize\",\n  \"stride\",\n  \"offset\",\n  \"attrib\",\n  \"name\",\n  \"attribName\",\n];\n\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  const length = src.length;\n  for (let ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\nfunction createArrayOfSameType(srcArray, length) {\n  const arraySrc = getArray$1(srcArray);\n  const newArray = new arraySrc.constructor(length);\n  let newArraySpec = newArray;\n  // If it appears to have been augmented make new one augmented\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  }\n  // If it was a full spec make new one a full spec\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray,\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n  return newArraySpec;\n}\n\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction concatVertices(arrayOfArrays) {\n  const names = {};\n  let baseName;\n  // get names of all arrays.\n  // and numElements for each set of vertices\n  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n    const arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n      const arrayInfo = arrays[name];\n      const numComponents = getNumComponents$1(arrayInfo, name);\n      const array = getArray$1(arrayInfo);\n      const numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  }\n\n  // compute length of combined array\n  // and return one for reference\n  function getLengthOfCombinedArrays(name) {\n    let length = 0;\n    let arraySpec;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      length += array.length;\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n    return {\n      length: length,\n      spec: arraySpec,\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    let baseIndex = 0;\n    let offset = 0;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n      offset += array.length;\n    }\n  }\n\n  const base = names[baseName];\n\n  const newArrays = {};\n  Object.keys(names).forEach(function(name) {\n    const info = getLengthOfCombinedArrays(name);\n    const newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray$1(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction duplicateVertices(arrays) {\n  const newArrays = {};\n  Object.keys(arrays).forEach(function(name) {\n    const arraySpec = arrays[name];\n    const srcArray = getArray$1(arraySpec);\n    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray$1(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nconst create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nconst create3DFBuffers = createBufferFunc(create3DFVertices);\nconst createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nconst createCubeBuffers = createBufferFunc(createCubeVertices);\nconst createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nconst createPlaneBuffers = createBufferFunc(createPlaneVertices);\nconst createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nconst createSphereBuffers = createBufferFunc(createSphereVertices);\nconst createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nconst createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nconst createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nconst createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nconst createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nconst createCrescentBuffers = createBufferFunc(createCrescentVertices);\nconst createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nconst createCylinderBuffers = createBufferFunc(createCylinderVertices);\nconst createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nconst createTorusBuffers = createBufferFunc(createTorusVertices);\nconst createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nconst createDiscBuffers = createBufferFunc(createDiscVertices);\n\n// these were mis-spelled until 4.12\nconst createCresentBufferInfo = createCrescentBufferInfo;\nconst createCresentBuffers = createCrescentBuffers;\nconst createCresentVertices = createCrescentVertices;\n\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer$1 = isArrayBuffer;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT                = 0x1902;\nconst DEPTH_STENCIL                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D                     = 0x0de1;\nconst TEXTURE_CUBE_MAP               = 0x8513;\nconst TEXTURE_3D                     = 0x806f;\nconst TEXTURE_2D_ARRAY               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\n\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1                      = 0x8057;\nconst RGBA4                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16            = 0x81A5;\nconst DEPTH_COMPONENT24            = 0x81A6;\nconst DEPTH_COMPONENT32F           = 0x8CAC;\nconst DEPTH32F_STENCIL8            = 0x8CAD;\nconst DEPTH24_STENCIL8             = 0x88F0;\n\n/* DataType */\nconst BYTE$2                         = 0x1400;\nconst UNSIGNED_BYTE$2                = 0x1401;\nconst SHORT$2                        = 0x1402;\nconst UNSIGNED_SHORT$2               = 0x1403;\nconst INT$2                          = 0x1404;\nconst UNSIGNED_INT$2                 = 0x1405;\nconst FLOAT$2                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\nconst HALF_FLOAT$1                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1], };\n    t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$2, UNSIGNED_SHORT$2], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$2], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$2], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$2], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$2], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$2], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$2], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$2], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$2], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$2], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$2], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$2], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$2], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$2], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$2], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$2], };\n    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1], };\n    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$2], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$2], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$2], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$2], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$2], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8$1], };\n    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer$1(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE$2;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n  if (isArrayBuffer$1(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  const target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D;\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D_ARRAY;\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer$1(src)) {\n    const Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer$1(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer$1(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer$1(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error$1 = error;\nconst warn$1 = warn;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER$1                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT$3                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT$3                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT$3                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D$1                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP$1              = 0x8513;\nconst TEXTURE_3D$1                    = 0x806F;\nconst TEXTURE_2D_ARRAY$1              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT$3]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  };\ntypeMap[INT$3]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    };\ntypeMap[UNSIGNED_INT$3]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 16, setter: floatMat2Setter,  };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 36, setter: floatMat3Setter,  };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 24, setter: floatMat23Setter, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 24, setter: floatMat32Setter, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 32, setter: floatMat42Setter, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 48, setter: floatMat43Setter, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT$3;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index + i, b.divisor);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT$3]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT$3]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT$3]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.\n * @return {WebGLShader} The created shader.\n * @private\n */\nfunction loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n  const errFn = opt_errorCallback || error$1;\n  // Create the shader object\n  const shader = gl.createShader(shaderType);\n\n  // Remove the first end of line because WebGL 2.0 requires\n  // #version 300 es\n  // as the first line. No whitespace allowed before that line\n  // so\n  //\n  // <script>\n  // #version 300 es\n  // </script>\n  //\n  // Has one line before it which is invalid according to GLSL ES 3.00\n  //\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n\n  // Load the shader source\n  gl.shaderSource(shader, shaderSource);\n\n  // Compile the shader\n  gl.compileShader(shader);\n\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    errFn(`${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`);\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback) {\n      return opt_attribs;\n    }\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n  }\n\n  const options = {\n    errorCallback: opt_errorCallback || error$1,\n    transformFeedbackVaryings: transformFeedbackVaryings,\n    transformFeedbackMode: transformFeedbackMode,\n  };\n\n  if (opt_attribs) {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function(shader) {\n    gl.deleteShader(shader);\n  });\n}\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program and calls useProgram.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const realShaders = [];\n  const newShaders = [];\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof (shader) === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = loadShader(gl, src, type, progOptions.errorCallback);\n      newShaders.push(shader);\n    }\n    if (isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    progOptions.errorCallback(\"not enough shaders for program\");\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n\n  const program = gl.createProgram();\n  realShaders.forEach(function(shader) {\n    gl.attachShader(program, shader);\n  });\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function(attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n  let varyings = progOptions.transformFeedbackVaryings;\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);\n  }\n  gl.linkProgram(program);\n\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    progOptions.errorCallback(`${\n      realShaders.map(shader => {\n        const src = addLineNumbersWithError(gl.getShaderSource(shader), '', 0);\n        const type = gl.getShaderParameter(shader, gl.SHADER_TYPE);\n        return `${glEnumToString(gl, type)}\\n${src}}`;\n      }).join('\\n')\n    }\\nError in program linking: ${lastError}`);\n\n    gl.deleteProgram(program);\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n  return program;\n}\n\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\nfunction createShaderFromScript(\n    gl, scriptId, opt_shaderType, opt_errorCallback) {\n  let shaderSource = \"\";\n  const shaderScript = getElementById(scriptId);\n  if (!shaderScript) {\n    throw new Error(`unknown script element: ${scriptId}`);\n  }\n  shaderSource = shaderScript.text;\n\n  const shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n  if (!shaderType) {\n    throw new Error('unknown shader type');\n  }\n\n  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n    const shader = createShaderFromScript(\n        gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderSources.length; ++ii) {\n    const shader = loadShader(\n        gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = { };\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n        continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      uniformSetters[name] = createUniformSetter(program, uniformInfo, location);\n    }\n  }\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      break;\n    }\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, Type, typeSize, paddedSize, isArray) {\n  if (isArray) {\n    const numElements = typeSize / Type.BYTES_PER_ELEMENT;\n    const numPaddedElements = paddedSize / Type.BYTES_PER_ELEMENT;\n    return function(value) {\n      let dst = 0;\n      for (let src = 0; src < value.length; src += numElements) {\n        for (let i = 0; i < numElements; ++i) {\n          view[dst + i] = value[src + i];\n        }\n        dst += numPaddedElements;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn$1(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const paddedSize = pad(typeInfo.size, 16);\n    const length = typeInfo.size + (data.size - 1) * paddedSize;\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const uniformView = new Type(array, data.offset, length / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    setters[name] = createUniformBlockUniformSetter(uniformView, Type, typeInfo.size, paddedSize, isArray);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, values) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = arguments.length;\n  for (let aNdx = 1; aNdx < numArgs; ++aNdx) {\n    const values = arguments[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n        continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpace] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program: program,\n    uniformSetters: uniformSetters,\n    attribSetters: attribSetters,\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  let good = true;\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (source.indexOf(\"\\n\") < 0) {\n      const script = getElementById(source);\n      if (!script) {\n        progOptions.errorCallback(\"no element with id: \" + source);\n        good = false;\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n  if (!good) {\n    return null;\n  }\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n  return createProgramInfoFromProgram(gl, program);\n}\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT$3                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D$2                     = 0x0de1;\n\nconst UNSIGNED_BYTE$3                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT$1                = 0x1902;\nconst RGBA$1                           = 0x1908;\nconst DEPTH_COMPONENT24$1              = 0x81a6;\nconst DEPTH_COMPONENT32F$1             = 0x8cac;\nconst DEPTH24_STENCIL8$1               = 0x88f0;\nconst DEPTH32F_STENCIL8$1              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4$1                          = 0x8056;\nconst RGB5_A1$1                        = 0x8057;\nconst RGB565$1                         = 0x8D62;\nconst DEPTH_COMPONENT16$1              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL$1                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE$1                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR$1                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA$1, type: UNSIGNED_BYTE$3, min: LINEAR$1, wrap: CLAMP_TO_EDGE$1, },\n  { format: DEPTH_STENCIL$1, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4$1] = true;\nrenderbufferFormats[RGB5_A1$1] = true;\nrenderbufferFormats[RGB565$1] = true;\nrenderbufferFormats[DEPTH_STENCIL$1] = true;\nrenderbufferFormats[DEPTH_COMPONENT16$1] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  let colorAttachmentCount = 0;\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n  attachments.forEach(function(attachmentOptions) {\n    let attachment = attachmentOptions.attachment;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;\n    }\n    if (!attachment) {\n      if (isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR$1;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR$1;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE$1;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE$1;\n        }\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D$2,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    if (isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER$2           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER$2, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$2 = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n  setDefaults(newDefaults);  // eslint-disable-line\n  setDefaults$1(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoFromProgram, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults$2 as setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };\n","export function html2element(html){\r\n  let template = document.createElement('template'); \r\n  template.innerHTML = html.trim(); // Never return a text node of whitespace as the result\r\n  return template.content.firstChild;\r\n} // html2element\r\n\r\n\r\nexport function svg2element(svg){\r\n  let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n  g.innerHTML = svg.trim();\r\n  return g.firstChild;\r\n} // svg2element\r\n\r\n\r\nexport class scaleLinear {\r\n  \r\n  _domain = [0, 1]\r\n  _range = [0, 1]\r\n\r\n  set domain(d){ this._domain = d } // domain\r\n  get domain(){ return this._domain } // domain\r\n\r\n  set range(r){ this._range = r } // range\r\n  get range(){ return this._range } // range\r\n\r\n  dom2range(v){\r\n\treturn mapSpaceAValueToSpaceB(v, this.domain, this.range)\r\n  } // dom2range\r\n  \r\n  range2dom(v){\r\n\treturn mapSpaceAValueToSpaceB(v, this.range, this.domain)  \r\n  } // range2dom\r\n} // scaleLinear\r\n\r\nfunction mapSpaceAValueToSpaceB(v, A, B){\r\n\treturn (v-A[0])/(A[1]-A[0]) * (B[1]-B[0]) + B[0]\r\n} // mapSpaceAValueToSpaceB\r\n\r\n\r\nexport function joinDataToElements(data, elements, idAccessor){\r\n  \r\n  // Find data that has no elements, find the elements that have data, and the leftover.\r\n  let elementsArray = [...elements];\r\n  let elementsDataIds = elementsArray.map(el=>idAccessor(el.__data__));\r\n  \r\n  \r\n  let g = elementsArray.reduce((acc,el)=>{\r\n\tlet d = data.filter(d_=>{\r\n\t\treturn idAccessor(el.__data__) == idAccessor(d_)\r\n\t}) // filter\r\n\tif( d.length > 0 ){\r\n\t  el.__data__ = d[0]\r\n\t  acc.update.push(el)\r\n\t} else {\r\n\t  acc.exit.push(el)\r\n\t} // if\r\n\treturn acc\r\n  }, {update: [], exit: []}) // filter\r\n  \r\n  g.enter = data.filter(d=>{\r\n\treturn !elementsDataIds.includes(idAccessor(d))\r\n  }) // filter\r\n  \r\n  return g\r\n} // joinDataToElements","\r\n\r\nexport function matrixArrayToCssMatrix(array) {\r\n  return \"matrix3d(\" + array.join(',') + \")\";\r\n}\r\n\r\nexport function multiplyPoint(matrix, point) {\r\n  \r\n  var x = point[0], y = point[1], z = point[2], w = point[3];\r\n  \r\n  var c1r1 = matrix[ 0], c2r1 = matrix[ 1], c3r1 = matrix[ 2], c4r1 = matrix[ 3],\r\n      c1r2 = matrix[ 4], c2r2 = matrix[ 5], c3r2 = matrix[ 6], c4r2 = matrix[ 7],\r\n      c1r3 = matrix[ 8], c2r3 = matrix[ 9], c3r3 = matrix[10], c4r3 = matrix[11],\r\n      c1r4 = matrix[12], c2r4 = matrix[13], c3r4 = matrix[14], c4r4 = matrix[15];\r\n  \r\n  return [\r\n    x*c1r1 + y*c1r2 + z*c1r3 + w*c1r4,\r\n    x*c2r1 + y*c2r2 + z*c2r3 + w*c2r4,\r\n    x*c3r1 + y*c3r2 + z*c3r3 + w*c3r4,\r\n    x*c4r1 + y*c4r2 + z*c4r3 + w*c4r4\r\n  ];\r\n}\r\n\r\nexport function multiplyMatrices(a, b) {\r\n  \r\n  // TODO - Simplify for explanation\r\n  // currently taken from https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js#L306-L337\r\n  \r\n  var result = [];\r\n  \r\n  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n      a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n      a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n      a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  \r\n  result[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  result[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  result[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  result[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n\r\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\r\n  result[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  result[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  result[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  result[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n\r\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\r\n  result[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  result[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  result[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  result[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n\r\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\r\n  result[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  result[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  result[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  result[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n\r\n  return result;\r\n}\r\n\r\nexport function multiplyArrayOfMatrices(matrices) {\r\n  \r\n  var inputMatrix = matrices[0];\r\n  \r\n  for(var i=1; i < matrices.length; i++) {\r\n    inputMatrix = multiplyMatrices(inputMatrix, matrices[i]);\r\n  }\r\n  \r\n  return inputMatrix;\r\n}\r\n\r\nexport function normalMatrix(matrix) {\r\n\r\n  /*\r\n    This function takes the inverse and then transpose of the provided\r\n    4x4 matrix. The result is a 3x3 matrix. Essentially the translation\r\n    part of the matrix gets removed.\r\n  \r\n    https://github.com/toji/gl-matrix\r\n  */\r\n  \r\n  var a00 = matrix[0], a01 = matrix[1], a02 = matrix[2], a03 = matrix[3],\r\n      a10 = matrix[4], a11 = matrix[5], a12 = matrix[6], a13 = matrix[7],\r\n      a20 = matrix[8], a21 = matrix[9], a22 = matrix[10], a23 = matrix[11],\r\n      a30 = matrix[12], a31 = matrix[13], a32 = matrix[14], a33 = matrix[15],\r\n\r\n      b00 = a00 * a11 - a01 * a10,\r\n      b01 = a00 * a12 - a02 * a10,\r\n      b02 = a00 * a13 - a03 * a10,\r\n      b03 = a01 * a12 - a02 * a11,\r\n      b04 = a01 * a13 - a03 * a11,\r\n      b05 = a02 * a13 - a03 * a12,\r\n      b06 = a20 * a31 - a21 * a30,\r\n      b07 = a20 * a32 - a22 * a30,\r\n      b08 = a20 * a33 - a23 * a30,\r\n      b09 = a21 * a32 - a22 * a31,\r\n      b10 = a21 * a33 - a23 * a31,\r\n      b11 = a22 * a33 - a23 * a32,\r\n\r\n      // Calculate the determinant\r\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) { \r\n    return null; \r\n  }\r\n  det = 1.0 / det;\r\n  \r\n  var result = []\r\n\r\n  result[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  result[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  result[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  result[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  result[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  result[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  result[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  result[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  result[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return result;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function rotateXMatrix(a){\r\n  \r\n  var cos = Math.cos;\r\n  var sin = Math.sin;\r\n  \r\n  return [\r\n       1,       0,        0,     0,\r\n       0,  cos(a),  -sin(a),     0,\r\n       0,  sin(a),   cos(a),     0,\r\n       0,       0,        0,     1\r\n  ];\r\n}\r\n\r\nexport function rotateYMatrix(a) {\r\n\r\n  var cos = Math.cos;\r\n  var sin = Math.sin;\r\n  \r\n  return [\r\n     cos(a),   0, sin(a),   0,\r\n          0,   1,      0,   0,\r\n    -sin(a),   0, cos(a),   0,\r\n          0,   0,      0,   1\r\n  ];\r\n}\r\n\r\nexport function rotateZMatrix(a) {\r\n\r\n  var cos = Math.cos;\r\n  var sin = Math.sin;\r\n  \r\n  return [\r\n    cos(a), -sin(a),    0,    0,\r\n    sin(a),  cos(a),    0,    0,\r\n         0,       0,    1,    0,\r\n         0,       0,    0,    1\r\n  ];\r\n}\r\n\r\n\r\nexport function scaleMatrix(w, h, d) {\r\n\treturn [\r\n\t    w,    0,    0,   0,\r\n\t    0,    h,    0,   0,\r\n\t    0,    0,    d,   0,\r\n\t    0,    0,    0,   1\r\n\t];\r\n}\r\n\r\n\r\nexport function translateMatrix(x, y, z) {\r\n\treturn [\r\n\t    1,    0,    0,   0,\r\n\t    0,    1,    0,   0,\r\n\t    0,    0,    1,   0,\r\n\t    x,    y,    z,   1\r\n\t];\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function perspectiveMatrix(fieldOfViewInRadians, aspectRatio, near, far) {\r\n  \r\n  // Construct a perspective matrix\r\n  \r\n  /*\r\n     Field of view - the angle in radians of what's in view along the Y axis\r\n     Aspect Ratio - the ratio of the canvas, typically canvas.width / canvas.height\r\n     Near - Anything before this point in the Z direction gets clipped (resultside of the clip space)\r\n     Far - Anything after this point in the Z direction gets clipped (outside of the clip space)\r\n  */\r\n  \r\n  var f = 1.0 / Math.tan(fieldOfViewInRadians / 2);\r\n  var rangeInv = 1 / (near - far);\r\n \r\n  return [\r\n    f / aspectRatio, 0,                          0,   0,\r\n    0,               f,                          0,   0,\r\n    0,               0,    (near + far) * rangeInv,  -1,\r\n    0,               0,  near * far * rangeInv * 2,   0\r\n  ];\r\n}\r\n\r\nexport function orthographicMatrix(left, right, bottom, top, near, far) {\r\n  \r\n  // Each of the parameters represents the plane of the bounding box\r\n  \r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n\t\r\n  var row4col1 = (left + right) * lr;\r\n  var row4col2 = (top + bottom) * bt;\r\n  var row4col3 = (far + near) * nf;\r\n  \r\n  return [\r\n     -2 * lr,        0,        0, 0,\r\n           0,  -2 * bt,        0, 0,\r\n           0,        0,   2 * nf, 0,\r\n    row4col1, row4col2, row4col3, 1\r\n  ];\r\n}\r\n\r\nexport function normalize( vector ) {\r\n  \r\n  // A utility function to make a vector have a length of 1\r\n  \r\n  var length = Math.sqrt(\r\n    vector[0] * vector[0] +\r\n    vector[1] * vector[1] +\r\n    vector[2] * vector[2]\r\n  )\r\n  \r\n  return [\r\n    vector[0] / length,\r\n    vector[1] / length,\r\n    vector[2] / length\r\n  ]\r\n}\r\n\r\nexport function invertMatrix( matrix ) {\r\n\t\r\n\t// Adapted from: https://github.com/mrdoob/three.js/blob/master/src/math/Matrix4.js\r\n\t\r\n\t// Performance note: Try not to allocate memory during a loop. This is done here\r\n\t// for the ease of understanding the code samples.\r\n\tvar result = [];\r\n\r\n\tvar n11 = matrix[0], n12 = matrix[4], n13 = matrix[ 8], n14 = matrix[12];\r\n\tvar n21 = matrix[1], n22 = matrix[5], n23 = matrix[ 9], n24 = matrix[13];\r\n\tvar n31 = matrix[2], n32 = matrix[6], n33 = matrix[10], n34 = matrix[14];\r\n\tvar n41 = matrix[3], n42 = matrix[7], n43 = matrix[11], n44 = matrix[15];\r\n\r\n\tresult[ 0] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;\r\n\tresult[ 4] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;\r\n\tresult[ 8] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;\r\n\tresult[12] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\tresult[ 1] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;\r\n\tresult[ 5] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;\r\n\tresult[ 9] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;\r\n\tresult[13] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;\r\n\tresult[ 2] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;\r\n\tresult[ 6] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;\r\n\tresult[10] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;\r\n\tresult[14] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;\r\n\tresult[ 3] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;\r\n\tresult[ 7] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;\r\n\tresult[11] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;\r\n\tresult[15] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;\r\n\r\n\tvar determinant = n11 * result[0] + n21 * result[4] + n31 * result[8] + n41 * result[12];\r\n\r\n\tif ( determinant === 0 ) {\r\n\t\tthrow new Error(\"Can't invert matrix, determinant is 0\");\r\n\t}\r\n\t\r\n\tfor( var i=0; i < result.length; i++ ) {\r\n\t\tresult[i] /= determinant;\r\n\t}\r\n\r\n\treturn result;\r\n}","export default class Camera{\r\n  \r\n  mouseDown = false\r\n  mouseStart = [0,0]\r\n  \r\n  // A third angle could be used to encode the camera 'roll'. 'z' is not changed in the current apps, but it would be used if the camera had 'walking' controls, e.g. through the arrow keys.\r\n  x = 0\r\n  y = 0\r\n  z = 0\r\n  theta = 0\r\n  phi = 0\r\n  \r\n  xStart = 0\r\n  yStart = 0\r\n  thetaStart = 0\r\n  phiStart = 0\r\n  \r\n  \r\n  \r\n  fieldOfViewInRadians = Math.PI * 0.2\r\n  aspectRatio = 1\r\n  nearClippingPlaneDistance = 1\r\n  farClippingPlaneDistance = 100\r\n  \r\n  constructor(){\r\n\tlet obj = this;\r\n  } // constructor\r\n  \r\n  moveStart(x,y){\r\n\tlet obj = this;\r\n\tobj.mouseStart = [x, y];\r\n\tobj.mouseDown = true;\r\n\t\r\n\tobj.thetaStart = obj.theta;\r\n\tobj.phiStart = obj.phi;\r\n\tobj.xStart = obj.x;\r\n\tobj.yStart = obj.y;\r\n  } // moveStart\r\n  \r\n  move(x,y){\r\n\tlet obj = this;\r\n\t\r\n\tif(obj.mouseDown){\r\n\t\t// Angles have to be in radians!! Division by 4 is just a relaxation parameter.\r\n\t\tlet diffX = Math.PI/180*(x - obj.mouseStart[0])/4;\r\n\t\tlet diffY = Math.PI/180*(y - obj.mouseStart[1])/4;\r\n\t\t\r\n\t\tobj.theta = obj.thetaStart + diffX;\r\n\t\tobj.phi = constrainValue( obj.phiStart - diffY, -Math.PI/2, Math.PI/2)\r\n\t} // if  \r\n  } // move\r\n  \r\n  moveEnd(){\r\n\tlet obj = this;\r\n\tobj.mouseDown = false;\r\n  } // moveEnd\r\n  \r\n  incrementNearClippingPlane(d){\r\n\tlet obj = this;\r\n\tobj.nearClippingPlaneDistance = Math.max(1, obj.nearClippingPlaneDistance + (d)/10);\r\n  } // cameraChangeDist\r\n} // Camera\r\n\r\n\t\r\n \r\n// The differences between the cameras are just the movement controls.\r\nexport class Camera2D extends Camera{\r\n  // The 2D camera has panning instead of changing the camera angle.\r\n  \r\n  // The z coordinate is not important here because it gets defined in the shaders as 0 in any case.\r\n  \r\n  constructor(){\r\n\tsuper()\r\n\tlet obj = this;\r\n\t\r\n\tobj.zoomPointClip = [0,0]\r\n\tobj.k = 1;\r\n  } // constructor\r\n  \r\n  \r\n  move(x,y, vpp){\r\n\t// Instead of changing the camera pitch/yaw/roll pan the view.\r\n\tlet obj = this;\r\n\tvpp = vpp == undefined ? 1 : vpp;\r\n\t\r\n\tif(obj.mouseDown){\r\n\t\tlet diffX = (x - obj.mouseStart[0])*vpp;\r\n\t\tlet diffY = (y - obj.mouseStart[1])*vpp;\r\n\t\t\r\n\t\t// Limit the panning?\r\n\t\tobj.x = obj.xStart - diffX;\r\n\t\tobj.y = obj.yStart + diffY;\r\n\t} // if  \r\n  } // move\r\n  \r\n  incrementZoomValue(d){\r\n\tthis.k += d;\r\n  } // incrementZoomValue\r\n} // Camera2D\r\n\r\n\r\n\r\nfunction constrainValue(v,a,b){\r\n  // Constrain value 'v' to a <= v <= b.\r\n  return Math.max(Math.min(v, b), a);\r\n} // constrainValue\r\n\r\n","/*\r\nThe MeshRenderer should be the one initiating data collection/deleting because it's the only one that can determine which ViewFrames should currently be played.\r\n\r\nTherefroe the ViewFrames should have a 'clear' method, which instructs the geometry to delete all the buffer data apart from the current. Furthermore, the ViewFrames need to have a method to tell the geometry to load additional data, and about which time step it should be anchored.\r\n\r\nWhen moving the ViewFrames the player should pause automatically. Maybe it will be possible to keep updating as the frame moves also. But that would then not allow ViewFrames that are behind other ViewFrames to delete their buffers, as they may become visible as the other ViewFrame moves. Maybe for them to offload there should be at least two things covering them up?\r\n\r\nThe ViewFrame will also host the playbar in the end. So then the MeshRenderer can collect the time spans from the ViewFrames in view, and then time step through them.\r\n\r\nShould there just be a minimize button on the ViewFrame so the user can switch a particular small multiple off without burying it under others?\r\n\r\nHow to pick the current time to play? Should the requestAnimationFrame be running continuously in the background? Yes - otherwise there are no interactions.\r\n\r\nMaybe for now just have a single play pause button? And just time step through in percentage terms?\r\n\r\nWhat will happen for simulations with very different time steps? Should just the closest frame be selected? Maybe the simplicity is best. Simulations with large time steps will just not change data that often.\r\n\r\nCould the mesh renderer just do the rendering all the time, and teh ViewFrames decide whether or not they need to be played? Then I would only need to figure out how to link multiple views together. Maybe like a chain button that turns on, and when clicking one play button they would all start? So the view would send a command to the scene, and then the scene would start all of the players.\r\n*/\r\n\r\nimport { html2element } from \"./helpers.js\";\r\n\r\nimport {scaleMatrix, translateMatrix, rotateXMatrix, rotateYMatrix, rotateZMatrix, multiplyArrayOfMatrices, perspectiveMatrix, orthographicMatrix, invertMatrix} from \"./matrices.js\"\r\n\r\n\r\nimport { Camera2D } from \"./Camera.js\";\r\n\r\n// div must have opacity to register the mouse events!!\r\n// Furthermore the overall wrapper is defined here so that after the class is inherited from there is space to append other modules. The class is inherited from (as opposed to plugged in as a module)\r\nlet template = `\r\n<div class=\"item\">\r\n  <div class=\"label\">Label</div>\r\n  <div class=\"view\" style=\"width:300px; height:200px; opacity:0.001;\">\r\n  </div>\r\n</div>\r\n`;\r\n\r\n\r\n\r\nexport default class ViewFrame2D{\r\n  constructor(gl){\r\n\tlet obj = this;\r\n\t\r\n\tobj.gl = gl;\r\n\tobj.node = html2element(template);\r\n\t\r\n\t// obj.view is a convenience reference that points to the node. Transforms.view is the view transformation matrix.\r\n\tobj.view = obj.node.querySelector(\"div.view\");\r\n\t\r\n\t// Some initial dummy geometry to allow initialisation.\r\n\tobj.geometry = { \r\n\t  domain: {\r\n\t\tx: [0, 1],\r\n\t\ty: [0, 1]\r\n\t  }\r\n\t} // initial dummy values\r\n\t\r\n\t// Transformation matrices.\r\n\tobj.transforms = {};\r\n\t\r\n\t\r\n\t/*\r\n\tInteractivity:\r\n\tWhat should clicking and dragging do? Pan, or adjust camera angle? \r\n\t\r\n\tFor 2D panning is more useful.\r\n\tFor 3D adjusting the camera angle is better.\r\n\t*/\r\n\tobj.camera = new Camera2D();\r\n\t\r\n\t// (e.clientX, e.clientY)\r\n\tobj.view.onmousedown  = function(e){ obj.cameraMoveStart(e) };\r\n\tobj.view.onmousemove  = function(e){ obj.cameraMove(e) };\r\n\tobj.view.onmouseup    = function(e){ obj.cameraMoveEnd() };\r\n\tobj.view.onmouseleave = function(e){ obj.cameraMoveEnd() };\r\n\t\r\n\t// adding a zoom directly causes the passive event warning to come up in the console, and also stops the wheel event from being properly executed.\r\n\t// If the div is empty the event does not occur!\r\n\tobj.view.addEventListener(\"wheel\", (e)=>{\r\n\t  e.preventDefault();\r\n\t  obj.cameraZoom(e);\r\n\t}, {passive: false})\r\n\t\r\n\t\r\n  } // constructor\r\n  \r\n  \r\n  /* The geometry moving is implemented in 'computeModelMatrix'. User interaction movement is implemented in 'computeViewMatrix'.  */\r\n  computeModelMatrix() {\r\n    // The model matrix incorporates the initial scaling and translation to make sure the data fits in view.\r\n\tlet dom = this.geometry.domain;\r\n\t\r\n\t// First translate left bottom corner to origin, scale so that top right domain corner is at 2,2, and then reposition so that domain is between -1 and 1.\r\n\tlet k = 2 / Math.max(dom.x[1]-dom.x[0], dom.y[1]-dom.y[0]);\r\n\t\r\n\t// Correct for the aspect ratio of the view element. For now the y domain is rescaled because the example data featured a larger x domain, and the width was kep constant. This can be made adjustable later.\r\n\tlet kar = ( dom.x[1]-dom.x[0] ) / ( dom.y[1]-dom.y[0] );\r\n\t\r\n\tlet translateToOrigin = translateMatrix(-dom.x[0], -dom.y[0], 0)\r\n\tlet scaleToClipSpace = scaleMatrix(k,k*kar,1);\r\n\tlet translateToScaleSpace = translateMatrix(-1,-1,0);\r\n\t\r\n\t\r\n    this.transforms.model = multiplyArrayOfMatrices([\r\n\t  translateToScaleSpace,\r\n\t  scaleToClipSpace,\r\n\t  translateToOrigin\r\n\t]) // model\r\n\r\n\r\n\t// Performance caveat: in real production code it's best not to create new arrays and objects in a loop. This example chooses code clarity over performance.\r\n  } // computeModelMatrix\r\n  \r\n  computeOrthographicMatrix(){\r\n\t// viewport: left, bottom, width, height\r\n\tthis.transforms.projection = [\r\n\t1, 0, 0, 0,\r\n\t0, 1, 0, 0,\r\n\t0, 0, 1, 0,\r\n\t0, 0, 0, 1\r\n\t]\r\n  } // computeOrthographicMatrix\r\n  \r\n  computeViewMatrix() {\r\n\tlet camera = this.camera;\r\n\t\r\n\t// PANNING\r\n\tlet position = translateMatrix(camera.x, camera.y, camera.z);\r\n\r\n\t// For zooming a scaling operation should be performed. And the zooming should be based on hte pointers position. So that point should stay in hte same position, while the rest of the view scales.\r\n\t\r\n\t// The values need to be in coordinate units! So the pixel location needs to be changed to value location. Mouse locations are per client window, and so must be corrected for viewport location to ensure consistent zooming behavior. Initially the zooming is not needed.\r\n\t\r\n\t\r\n\t// THE ZOOM POINT MUST BE CONVERTED TO THE CLIP SPACE FROM PIXEL COORDINATES!!! I want to translate to 0,0. That's the middle of the viewport. y has to be calculated in terms of client window.\r\n\t\r\n\t// For zooming I want the zoomed point to remain where it is at the moment, and everything around it should be scaled. So, for that to happen the mesh needs to be translated by the location of the point in clip coordinates, scaled, and translated back to the same coordinates in pixel values.\r\n\tlet dx = camera.zoomPointClip[0];\r\n\tlet dy = camera.zoomPointClip[1];\r\n\tlet k  = camera.k;\r\n\t\r\n\t\r\n\t\r\n\t// let x0 = camera.mouseStart[0] * this.valuePerPixel;\r\n\t// let y0 = camera.mouseStart[1] * this.valuePerPixel;\r\n\t// let k  = camera.k;\r\n\t\r\n\tlet translateToOrigin    = translateMatrix(-dx, -dy, 0);\r\n\tlet scaleToZoomSpace     = scaleMatrix(k, k, 1);\r\n\tlet translateToZoomSpace = translateMatrix(dx, dy, 0);\r\n\r\n\r\n\t// Inverse the operation for camera movements, because we are actually moving the geometry in the scene, not the camera itself.\r\n\t// this.transforms.view = invertMatrix( position );\r\n\t\r\n\t\r\n\tthis.transforms.view = multiplyArrayOfMatrices([\r\n\t  invertMatrix( position ),\r\n\t  translateToZoomSpace,\r\n\t  scaleToZoomSpace,\r\n\t  translateToOrigin\r\n\t]) // model\r\n\t\r\n  } // computeViewMatrix\r\n  \r\n  \r\n  // On the go updates.\r\n  update(){\r\n\tlet obj = this;\r\n\t\r\n\t// Compute our matrices\r\n    obj.computeModelMatrix();\r\n    obj.computeViewMatrix();\r\n    obj.computeOrthographicMatrix();\r\n  } // update\r\n  \r\n  get viewport(){\r\n    let obj = this;\r\n\tlet gl = obj.gl;\r\n\tlet rect = obj.view.getBoundingClientRect();\r\n    \r\n\t// The viewport bottom is measured from the bottom of the screen.\r\n\tlet width  = rect.right - rect.left;\r\n\tlet height = rect.bottom - rect.top;\r\n\tlet left   = rect.left;\r\n\tlet bottom = gl.canvas.clientHeight - rect.bottom;\r\n\t\r\n\treturn [left, bottom, width, height]\r\n  } // get viewport\r\n  \r\n  get valuePerPixel(){\r\n\t// The zoom transformation will work in the clip space, which is within [-1,1]. Therefore the range is 2, and independent of hte domain of the data.\r\n\tlet obj = this;\r\n\tlet arx = obj.camera.k*2/obj.viewport[2];\r\n\tlet ary = obj.camera.k*2/obj.viewport[3];\r\n\treturn Math.max(arx, ary)\r\n  } // get aspectRatio\r\n  \r\n  get isOnScreen(){\r\n\t// Check whether the viewframe is still on hte canvas screen. If it's display has been set to \"none\" then just return a false. \"display: none\" will be required when introducing the grouping interfaces.\r\n\tlet obj = this;\r\n\t\r\n\tlet isOnScreen = false;\r\n\tif(obj.node.style.display != \"none\"){\r\n\t\tlet rect = obj.node.getBoundingClientRect();\r\n    \r\n\t\tlet isOffScreen = \r\n\t\t  (rect.bottom < 0 || rect.top > obj.gl.canvas.clientHeight) || \r\n\t\t  (rect.right < 0 || rect.left > obj.gl.canvas.clientWidth)\r\n\t\t  \r\n\t\tisOnScreen = !isOffScreen;\r\n\t} // if\r\n\t\r\n\treturn isOnScreen;\r\n  } // isOnScreen\r\n  \r\n  // Camera\r\n  cameraMoveStart(e){\r\n\tlet camera = this.camera;\r\n\tcamera.moveStart(e.clientX, e.clientY);\r\n  } // startMove\r\n  \r\n  cameraMove(e){\r\n\tlet camera = this.camera;\r\n\tcamera.move(e.clientX, e.clientY, this.valuePerPixel) \r\n  } // cameraMove\r\n  \r\n  cameraMoveEnd(){\r\n\tlet camera = this.camera;\r\n\tcamera.moveEnd();\r\n  } // cameraMoveEnd\r\n  \r\n  cameraZoom(e){\r\n\tlet obj = this;\r\n\t// The 2D camera works off of a zoom value, because the perspective does not change. There is no perspective transformation because the data only has x/y, and to make zoom work through perspective a third z value would have to be spliced into the ArrayBuffer data.\r\n\t\r\n\t// The first translate can be made using the clip coordinates. The translate back after scaling has to be done using pixels, because the point should stay at the same pixel location. Store both the clip coordinate, and the pixel coordinate.\r\n\tobj.camera.zoomPointClip = obj.pixel2clip([e.clientX, e.clientY]);\r\n\tobj.camera.incrementZoomValue(e.deltaY<0 ? 0.1 : -0.1);\r\n  } // cameraChangeDist\r\n  \r\n  \r\n  pixel2clip(p){\r\n\t// Pixel values can be obtained from the event. Convert the pixel value to the clip space values.\r\n\tlet obj = this;\r\n\t\r\n\tlet rect = obj.view.getBoundingClientRect();\r\n\t\r\n\t// Clicked point within the viewport, in terms of pixels.\r\n\tlet x_px = p[0] - rect.left;\r\n\tlet y_px = p[1] - rect.top;\r\n\t\r\n\t// Convert to clip coordinates. Camera.x is in data coordinates.\r\n\tlet x_clip =  2*( x_px / (rect.right - rect.left) ) - 1;\r\n\tlet y_clip = -2*( y_px / (rect.bottom - rect.top) ) + 1;\r\n\t\r\n\treturn [x_clip, y_clip]\r\n  } // pixel2clip\r\n  \r\n  // When finding the return transformation I'm figuring out what the translation of the left lower corner should be to keep a particular point at the same pixel location.\r\n  \r\n  // But the model matrix converts from the data domain to hte clip domain.\r\n  \r\n  \r\n  title(label){\r\n\t// Change the title of the player.\r\n\tthis.node.querySelector(\"div.label\").textContent = label;\r\n  } // title\r\n} // ViewFrame2D","/*\r\nShould these be split up into a Mesh2D superclass and an UnsteadyMesh2D childclass?\r\n*/\r\n  \r\n\r\n// Some geometry to initialise the buffers.\r\nlet vertices = [\r\n  1, -0.99,\r\n  1, -1,\r\n  0.99, -1\r\n]; // vertices\r\n\r\n// clockwise triangles. \r\nlet indices = [\r\n  0, 1, 2\r\n]; // indices\r\n\r\n\r\n// values per vertex\r\nlet values = [\r\n  0,\r\n  0,\r\n  0\r\n]; // values\r\n \r\n// Initial domain.\r\nlet initdomain = {\r\n  x: [-1, 1],\r\n  y: [-1, 1],\r\n  v: [0, 1],\r\n  t: [0, 1]\r\n}\r\n\r\n\r\nexport default class Mesh2D{\r\n  constructor(gl, unsteadyMetadataFilename){\r\n\tlet obj = this;\r\n\r\n\tobj.gl = gl;\r\n    // obj.vertices = vertices;\r\n    // obj.indices = indices;\r\n    // obj.colors = colors;\r\n\r\n\t// \"In case of glBufferData, the buffer object currently bound to target is used.\" (https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBufferData.xhtml)\r\n\t\r\n\t\r\n\t// Size of the data used by each vertex is selected in 'MeshRenderer.updateAttributesAndUniforms'. However, that should really be kept with the data specification, so that MeshRenderer doesn't need to change if the data changes. Then the MeshRenderer becomes independent of the dimension of data.\r\n    let verticesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, verticesBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\r\n\tobj.verticesBuffer = verticesBuffer;\r\n\t\r\n\tlet valuesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, valuesBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(values), gl.STATIC_DRAW);\r\n    obj.valuesBuffer = valuesBuffer;\r\n\t\r\n    let indicesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array(indices), gl.STATIC_DRAW);\r\n\tobj.indicesBuffer = indicesBuffer;\r\n\tobj.indicesLength = indices.length;\r\n\t\r\n\t\r\n\t// If teh index defines which frame to play next, then the timesteps need to be ordered. Maybe it's best to just enforce this by sorting the timesteps when they are loaded.\r\n\tobj._currentFrameInd = 0;\r\n\t\r\n\t\r\n\t\r\n\t// Imagine that some metadata was loaded in.\r\n\t// \"./data/testmetadata.json\"\r\n    fetch(unsteadyMetadataFilename)\r\n\t  .then(res=>res.json())\r\n\t  .then(content=>{\r\n\t\t\r\n\t\t// But all three need to be available at the same time before rendering.\r\n\t\tlet indicesPromise = loadBinData(content.indices)\r\n\t\t  .then(ab=>{ return new Uint32Array(ab) })\r\n\t\tlet verticesPromise = loadBinData(content.vertices)\r\n\t\t  .then(ab=>{ return new Float32Array(ab) })\r\n\t\t  \r\n\t\t  \r\n\t\t/* The values should be loaded in separately from the vertices and indices.\r\n\t\t\r\n\t\tDo we just loop through some timesteps and make the promises. However, the data size restrictions should be maintained at all times! The data loading function should keep that in mind.\r\n\t\t*/\r\n\t\tlet valuesPromise = loadBinData(content.timesteps[obj.currentFrameInd].filename)\r\n\t\t  .then(ab=>{ return new Uint8Array(ab) })\r\n\t\t  .then(ui8=>{ return Float32Array.from(ui8) })\r\n\t\t\r\n\t\t\r\n\t\tPromise.all([indicesPromise, verticesPromise, valuesPromise]).then(d=>{\r\n\t\t  \r\n\t\t  \r\n\t\t  // Domain has to be overwritten when the actual data is loaded. Afterwards, only the 'c' property should change with the timesteps. By changing the global color value ranges the colorbar can be adjusted by the user.]\r\n\t\t  obj.domain = content.domain;\r\n\t\t  obj.timesteps = content.timesteps;\r\n\t\t  \r\n\t\t  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);\r\n\t\t  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, d[0], gl.STATIC_DRAW);\r\n\t\t  obj.indicesLength = d[0].length;\r\n\t\t  \t\t  \r\n\t\t  gl.bindBuffer(gl.ARRAY_BUFFER, verticesBuffer);\r\n\t\t  gl.bufferData(gl.ARRAY_BUFFER, d[1], gl.STATIC_DRAW);\r\n\t\t  \r\n\t\t  gl.bindBuffer(gl.ARRAY_BUFFER, valuesBuffer);\r\n\t\t  gl.bufferData(gl.ARRAY_BUFFER, d[2], gl.STATIC_DRAW);\r\n\t\t\r\n\t\t  \r\n\t\t  \r\n\t\t  \r\n\t\t\r\n\t\t}) // then\r\n\t\t\r\n\t\t\r\n\t}) // fetch\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n  } // constructor\r\n  \r\n\r\n \r\n  // The 'values' are stored as a 'scaled uint8 array' to save memory. The values are retransformed back into the original domain on the GPU by mapping them from [0,255] to 'currentUintRange', which is obtained from the metadata file of this unsteady simulation.\r\n  \r\n  // The MeshRenderer2D looks at the domain to determine what the full value domain of this small multiple will be. It looks at the c to determine the uint compression domain.\r\n  domain = initdomain\r\n  timesteps = []\r\n  \r\n  get currentUintRange(){\r\n\t// This used to be in domain under 'c', but was moved here as it will change as the frames change.\r\n\tlet obj = this;\r\n\t\r\n\treturn obj.timesteps.length > 0 ? obj.timesteps[obj.currentFrameInd].c_uint : [0,1];\r\n\t\r\n\t// return [871, 977]\r\n  } // currentUintRange\r\n  \r\n  get currentTime(){\r\n\t// Get the time of the current frame as a fraction of the total time span available.\r\n\tlet obj = this;\r\n\treturn obj.timesteps[obj.currentFrameInd].t;\r\n  } // currentTimestep\r\n  \r\n  get memoryUsed(){\r\n\tlet obj = this;\r\n\t\r\n\tlet memory = 0;\r\n\tobj.timesteps.forEach(t=>{\r\n\t  if(t.byteLength){\r\n\t\tmemory += t.byteLength\r\n\t  } // if\r\n\t})\r\n\t\r\n\treturn memory\r\n  } // memoryUsed\r\n  \r\n  // There should be two separate methods to pick the current frame. One is by incrementing, and the other is by setting the appropriate time.\r\n  incrementCurrentFrame(){\r\n\t// When incrementing past the end of the available time range we loop to the start.\r\n\tlet obj = this;\r\n\tobj.currentFrameInd = (obj.currentFrameInd + 1) % obj.timesteps.length\r\n  } // incrementCurrentFrame\r\n  \r\n  timestepCurrentFrame(t){\r\n\t// Different players can start at different times. However, if a dt is passed in to increment the current frame the incrementing can truncate a part of the dt, leading to different players to be at different times. Therefore the actual time is expected. If t is outside of the time range available, the min or max frame indices are returned as appropriate.\r\n\tlet obj = this;\r\n\t\r\n\t\r\n\tlet i = 0;\r\n\tlet dist = Number.POSITIVE_INFINITY;\r\n\tobj.timesteps.forEach((timestep,j)=>{\r\n\t\tlet d = Math.abs( timestep.t-t )\r\n\t\tif(d < dist){\r\n\t\t\tdist = d;\r\n\t\t\ti = j;\r\n\t\t} // if\r\n\t}) // forEach\r\n\t\r\n\tobj.currentFrameInd = i;\r\n\r\n  } // timestepCurrentFrame\r\n  \r\n  \r\n  // This should be reworked into an outside call, because eventually it would be beneficial if the files can be loaded by a library system, and the mesh is only responsible to declare what it would like?\r\n  set currentFrameInd(i){\r\n\t// When the index is set automatically manage the data. This will allow the data to be loaded once and kept in memory.\r\n\tlet obj = this;\r\n\t\r\n\tobj._currentFrameInd = i;\r\n\t\r\n\t// For now just load the current frame here, and save it to the timestep.\r\n\tlet timestep = obj.timesteps[obj._currentFrameInd];\r\n\tif(timestep.valuesPromise == undefined){\r\n\t\ttimestep.valuesPromise = loadBinData(timestep.filename)\r\n\t\t  .then(ab=>{ return new Uint8Array(ab) })\r\n\t\ttimestep.valuesPromise.then(ui8=>{\r\n\t\t\ttimestep.byteLength = ui8.byteLength\r\n\t\t})\r\n\t} // if\r\n\t\r\n  } // set currentFrameInd\r\n  \r\n  get currentFrameInd(){\r\n\treturn this._currentFrameInd;\r\n  } // get currentFrameInd\r\n  \r\n  \r\n  updateCurrentFrameBuffer(){\r\n\t// The UnsteadyPlayer will input an actual timestep, as opposed to just increment the frame. This allows simulations with different temporal resolutions to be compared directly. Comparable time frames are selected based on available data.\r\n\t\r\n\t// What will be passed in? Just an icrement I guess, and it's up to the user to provide time variables with the same dt and in the same domain.\r\n\tlet obj = this;\r\n\tlet gl = obj.gl;\r\n\t\r\n\t// The values from the files were stored as uint8, but the GPU requires them to be float32. The data is converted just before passing it to the buffer.\t\r\n\tobj.timesteps[obj.currentFrameInd].valuesPromise\r\n\t  .then(ui8=>{ return Float32Array.from(ui8) })\r\n\t  .then(f32=>{\r\n\t\t  gl.bindBuffer(gl.ARRAY_BUFFER, obj.valuesBuffer);\r\n\t\t  gl.bufferData(gl.ARRAY_BUFFER, f32, gl.STATIC_DRAW);\r\n\t\r\n\t  })\r\n\t\r\n  } // updateCurrentFrameBuffer\r\n  \r\n  \r\n} // Mesh2D\r\n\r\n\r\nfunction loadBinData(filename){\r\n  return fetch(filename).then(res=>res.arrayBuffer());\r\n} // getBinData\r\n\r\n\r\n\r\n/*\r\n{\r\n\tx: [-0.76, 1.01],\r\n\ty: [-0.1, 1],\r\n\tv: [870.4389253677576, 977.0020293037556]\r\n}\r\n*/","export function html2element(html){\r\n  let template = document.createElement('template'); \r\n  template.innerHTML = html.trim(); // Never return a text node of whitespace as the result\r\n  return template.content.firstChild;\r\n} // html2element\r\n\r\n\r\nexport function svg2element(svg){\r\n  let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n  g.innerHTML = svg.trim();\r\n  return g.firstChild;\r\n} // svg2element\r\n\r\n\r\nexport class scaleLinear {\r\n  \r\n  _domain = [0, 1]\r\n  _range = [0, 1]\r\n\r\n  set domain(d){ this._domain = d } // domain\r\n  get domain(){ return this._domain } // domain\r\n\r\n  set range(r){ this._range = r } // range\r\n  get range(){ return this._range } // range\r\n\r\n  dom2range(v){\r\n\treturn mapSpaceAValueToSpaceB(v, this.domain, this.range)\r\n  } // dom2range\r\n  \r\n  range2dom(v){\r\n\treturn mapSpaceAValueToSpaceB(v, this.range, this.domain)  \r\n  } // range2dom\r\n} // scaleLinear\r\n\r\nfunction mapSpaceAValueToSpaceB(v, A, B){\r\n\treturn (v-A[0])/(A[1]-A[0]) * (B[1]-B[0]) + B[0]\r\n} // mapSpaceAValueToSpaceB\r\n\r\n\r\nexport function joinDataToElements(data, elements, idAccessor){\r\n  \r\n  // Find data that has no elements, find the elements that have data, and the leftover.\r\n  let elementsArray = [...elements];\r\n  let elementsDataIds = elementsArray.map(el=>idAccessor(el.__data__));\r\n  \r\n  \r\n  let g = elementsArray.reduce((acc,el)=>{\r\n\tlet d = data.filter(d_=>{\r\n\t\treturn idAccessor(el.__data__) == idAccessor(d_)\r\n\t}) // filter\r\n\tif( d.length > 0 ){\r\n\t  el.__data__ = d[0]\r\n\t  acc.update.push(el)\r\n\t} else {\r\n\t  acc.exit.push(el)\r\n\t} // if\r\n\treturn acc\r\n  }, {update: [], exit: []}) // filter\r\n  \r\n  g.enter = data.filter(d=>{\r\n\treturn !elementsDataIds.includes(idAccessor(d))\r\n  }) // filter\r\n  \r\n  return g\r\n} // joinDataToElements","import { svg2element } from \"./helpers.js\";\r\n\r\n\r\n\r\n\r\n\r\nfunction play(width, y){\r\n\t\r\n\t\r\n\t// Calculate the size of the triangle, and where the drawing should begin.\r\n\tlet height = width*2*Math.sqrt(3)/3;\r\n\t\r\n\t\r\n\tlet r_max = height*Math.sqrt(3)/6;\r\n    let r = 3 > r_max ? r_max : 3;\r\n    let dH = r*Math.sqrt(3); // Length of side cut by 1 rounding.\r\n\t\r\n\r\n    let Mx = 0;\r\n\tlet My = y + 5 - height/2;\r\n    \r\n    let p0 = [Mx, My]\r\n    let p1 = [Mx + height*Math.sqrt(3)/2, My + height/2]\r\n    let p2 = [Mx, My + height]\r\n    \r\n\t\r\n    \r\n    return `M${p0[0]} ${p0[1]+dH}\r\n      a ${r},${r}, 0,0,1  ${r*3/2}, ${-dH/2}\r\n      L ${p1[0]-r*3/2} ${p1[1]-dH/2}\r\n      a ${r},${r}, 0,0,1  0, ${dH}\r\n      L ${p2[0]+r*3/2} ${p2[1]-dH/2}\r\n      a ${r},${r}, 0,0,1  ${-r*3/2}, ${-dH/2}\r\n      Z\r\n      `\r\n\t\r\n} // playPath\r\n\r\nfunction pause(width, y){\r\n\t\r\n    let height = width*2*Math.sqrt(3)/3 - 2*(3*Math.sqrt(3)-3);\r\n    let dx = width/5;\r\n    let r = 3;\r\n    \r\n\tlet Mx = 0;\r\n\tlet My = y + 5 - height/2;\r\n\t\r\n    return `\r\n      M ${Mx+r} ${My} \r\n      L ${Mx+2*dx-r} ${My}\r\n      a ${r},${r} 0,0,1 ${r},${r}\r\n      L ${Mx+2*dx} ${My+height-r}\r\n      a ${r},${r} 0,0,1 ${-r},${r}\r\n      L ${Mx+r} ${My+height}\r\n      a ${r},${r} 0,0,1 ${-r},${-r}\r\n      L ${Mx} ${My+r}\r\n      a ${r},${r} 0,0,1 ${r},${-r}\r\n\t  M ${Mx+3*dx + r} ${My}\r\n      L ${Mx+5*dx-r} ${My}\r\n      a ${r},${r} 0,0,1 ${r},${r}\r\n      L ${Mx+5*dx} ${My+height-r}\r\n      a ${r},${r} 0,0,1 ${-r},${r}\r\n      L ${Mx+3*dx+r} ${My+height}\r\n      a ${r},${r} 0,0,1 ${-r},${-r}\r\n      L ${Mx+3*dx} ${My+r}\r\n      a ${r},${r} 0,0,1 ${r},${-r}\r\n    `\r\n} // pausePath\r\n\r\n\r\nlet template = `\r\n<g style=\"cursor: pointer;\">\r\n  <path fill=\"tomato\" d=\"\"></path>\r\n</g>\r\n`\r\n\r\n\r\n\r\n\r\n\r\n// Maybe the y should just be set outside? And the same for the chapter?? Maybe give it the y it should center itself about?\r\n\r\n// textHeight + textBottomMargin + rectHighlightHeightDelta + rectHeight/2 - H/2\r\nexport default class PlayButton{\r\n\t\r\n  // The y is given as the centerline about which to position the button. Half above, and half below. The initial y is therefore half the height, and should draw the button completely on hte svg.\r\n  y = 20*2*Math.sqrt(3)/3 / 2;\r\n  width = 20;\r\n\t\r\n  constructor(){\r\n    let obj = this;\r\n\tobj.node = svg2element( template );\r\n  } // constructor\r\n  \r\n  update(playing){\r\n\tlet obj = this;\r\n\tlet d = playing ? pause(obj.width, obj.y) : play(obj.width, obj.y);\r\n\tobj.node.querySelector(\"path\").setAttribute(\"d\", d)\t\r\n  } // update\r\n} // PlayButton","import { svg2element } from \"./helpers.js\";\r\n\r\n\r\nlet defaultRectAttributes = `stroke=\"white\" stroke-width=\"2px\"`;\r\nlet template = `<g class=\"chapter\">\r\n  <rect class=\"background\" fill=\"gainsboro\" ${ defaultRectAttributes }\"></rect>\r\n  <rect class=\"buffering\" fill=\"gray\" ${ defaultRectAttributes }\"></rect>\r\n  <rect class=\"foreground\" fill=\"tomato\" ${ defaultRectAttributes }\"></rect>\r\n  <text style=\"display: none;\"></text>\r\n</g>`\r\n\r\n\r\nexport default class PlayBarAnnotation{\r\n\t\r\n  // y = textHeight + textBottomMargin + highlightHeightDelta\r\n  y = 12 + 2 + 3;\r\n  height = 10\r\n  dh = 4\r\n  \r\n  constructor(config, tscale){\r\n    let obj = this;\r\n\tobj.node = svg2element(template);\r\n\t\r\n\tobj.background = obj.node.querySelector(\"rect.background\");\r\n\tobj.buffering = obj.node.querySelector(\"rect.buffering\");\r\n\tobj.foreground = obj.node.querySelector(\"rect.foreground\");\r\n\tobj.label = obj.node.querySelector(\"text\");\r\n\t\r\n\tobj.config = config;\r\n\tobj.tscale = tscale;\r\n\t\r\n\t\r\n\tobj.node.addEventListener(\"mouseenter\", ()=>{\r\n\t\tobj.highlight();\r\n\t}) // addEventListener\r\n\t\r\n\tobj.node.addEventListener(\"mouseover\", ()=>{\r\n\t\tobj.highlight();\r\n\t}) // addEventListener\r\n\t\r\n\tobj.node.addEventListener(\"mouseout\", ()=>{\r\n\t\tobj.unhighlight();\t\t\t\r\n\t}) // addEventListener\r\n  } // constructor\r\n  \r\n  update(t_play, t_buffer){\r\n\tlet obj = this;\r\n\t\r\n\tlet y = obj.y;\r\n\tlet x = obj.tscale.dom2range(obj.config.starttime);\r\n\r\n    obj.background.setAttribute(\"y\", y)\r\n\tobj.background.setAttribute(\"x\", x);\r\n\tobj.background.setAttribute(\"width\", obj.width)\r\n\tobj.background.setAttribute(\"height\", obj.height)\r\n\t \r\n\tobj.buffering.setAttribute(\"y\", y)\r\n\tobj.buffering.setAttribute(\"x\", x);\r\n\tobj.buffering.setAttribute(\"width\", obj.width*obj.timeFraction(t_buffer))\r\n\tobj.buffering.setAttribute(\"height\", obj.height)\r\n\t  \r\n\tobj.foreground.setAttribute(\"y\", y)\r\n\tobj.foreground.setAttribute(\"x\", x);\r\n\tobj.foreground.setAttribute(\"width\", obj.width*obj.timeFraction(t_play))\r\n\tobj.foreground.setAttribute(\"height\", obj.height)\r\n\t  \r\n\tobj.label.setAttribute(\"y\", 12)\r\n\tobj.label.setAttribute(\"x\", x)\r\n\tobj.label.innerHTML = obj.config.label\r\n\r\n  } // update\r\n  \r\n  \r\n  get width(){\r\n\tlet obj = this;\r\n\tlet x0 = obj.tscale.dom2range(obj.config.starttime);\r\n\tlet x1 = obj.tscale.dom2range(obj.config.endtime);\r\n\t// At the beginning hte widths may be negative because the starttime of the comment exceeds the time domain of the playbar that hasn't yet been updated to the right interval. Returen 0 while this is so.\r\n\treturn x1 - x0 < 0 ? 0 : x1 - x0;\r\n  } // width\r\n  \r\n  timeFraction(t){\r\n\tlet obj = this;\r\n\tlet tf = ( t - obj.config.starttime ) / (obj.config.endtime - obj.config.starttime);\r\n\treturn Math.abs(tf - 0.5) <= 0.5 ? tf : tf>0;\r\n  } // timeFraction\r\n  \r\n  highlight(){\r\n\tlet obj = this;\r\n\thighlightRectangle( obj.background, obj.y, obj.height, obj.dh );\r\n\thighlightRectangle( obj.buffering, obj.y, obj.height, obj.dh );\r\n\thighlightRectangle( obj.foreground, obj.y, obj.height, obj.dh );\r\n\tobj.label.style.display = \"\";\r\n  } // highlight\r\n  \r\n  unhighlight(){\r\n\tlet obj = this;\r\n\tunhighlightRectangle( obj.background, obj.y, obj.height );\r\n\tunhighlightRectangle( obj.buffering, obj.y, obj.height );\r\n\tunhighlightRectangle( obj.foreground, obj.y, obj.height );\r\n\tobj.label.style.display = \"none\";\r\n  } // highlight\r\n} // PlayBarAnnotation\r\n\r\n\r\nfunction highlightRectangle(r, y, h, dh){\r\n\tr.height.baseVal.value = h + 2*dh; \r\n\tr.y.baseVal.value = y - dh;\r\n} // highlightRectangle\r\n\r\nfunction unhighlightRectangle(r, y, h){\r\n\tr.height.baseVal.value = h;\r\n\tr.y.baseVal.value = y;\r\n} // unhighlightRectangle","import { svg2element, scaleLinear, joinDataToElements } from \"./helpers.js\";\r\nimport PlayBarAnnotation from \"./PlayBarAnnotation.js\";\r\n\r\n// This class is in charge of drawing the play bar. It takes in user prescribed annotations and the min and maximum times. It fills the gaps between the user prescribed annotations and the min/max times with empty chapters. The process is repeated anytime a new annotation is added.\r\n\r\nlet template = `<g style=\"cursor: pointer;\"></g>`; // template\r\n\r\nexport default class PlayBar{\r\n\t\r\n  // Coordinates in whole svg frame.\r\n  y = 12 + 2 + 3;\r\n  x0 = 20 + 6;\r\n  x1 = 300;\r\n\t\r\n  annotations = []\r\n\t\r\n  t_min = 0\r\n  t_max = 1\r\n\t\r\n  t_buffer = 0\r\n  t_play = 0\r\n\t\r\n  constructor(){\r\n\tlet obj = this;\r\n\tobj.node = svg2element( template );\r\n\t\r\n\tobj._tscale = new scaleLinear();\r\n  } // constructor\r\n  \r\n    \r\n  get tscale(){\r\n\t// The tscale is relative to the whole svg element, and takes in whole svg coordinates.\r\n\tlet obj = this;\r\n\t\t\r\n\tobj._tscale.domain = [obj.t_min, obj.t_max]\r\n\tobj._tscale.range = [obj.x0, obj.x1]\r\n\t\r\n\treturn obj._tscale;\r\n\t  \r\n  } // get tscale\r\n  \r\n  \r\n  rebuild(){\r\n\t// I need to do the join, but on objects instead of elements... Or just throw them all out and create new ones? Simpler I guess\r\n\tlet obj = this;\r\n\t\r\n\tlet exiting = obj.node.querySelectorAll(\"g.chapter\");\r\n\tfor(let i=0; i<exiting.length; i++){\r\n\t\texiting[i].remove()\r\n\t} // for\r\n\t\r\n\t// The creation of the chapters to show after somme annotations have been pushed still needs to be implemented.\r\n\tfunction makeChapterObj(label, starttime, endtime){\r\n\t\treturn {label: label, starttime: starttime, endtime: endtime==undefined ? obj.t_max : endtime}\r\n\t} // makeChapterObj\r\n\t\r\n\t\r\n\t// The ultimate way of doing it would be for the annotations to persist below other smaller annotations.\r\n\tlet chapters = obj.annotations.reduce((acc, a, i)=>{\r\n\t\t\r\n\t\tlet previous = acc[acc.length - 1];\r\n\t\tlet current = makeChapterObj( a.label, a.starttime, a.endtime );\r\n\t\t\r\n\t\tif(previous.endtime < current.starttime){\r\n\t\t\t// Don't curtail hte previous one but instead allow it to draw completely. This allows the chapters to be 'stacked'. Ordering them by start time ensures they all have a handle available.\r\n\t\t\t\r\n\t\t\t// Push in the needed padding, and then the annotation.\r\n\t\t\tacc.push( makeChapterObj( \"\", previous.endtime, current.starttime ) );\r\n\t\t} // if\r\n\t\t\r\n\t\tacc.push( current )\r\n\t\t\r\n\t\tif(i==(obj.annotations.length-1) && current.endtime < obj.t_max){\r\n\t\t    acc.push( makeChapterObj( \"\", current.endtime, obj.t_max ) )\r\n\t\t} // if\r\n\t\t\r\n\t\treturn acc\r\n\t}, [ makeChapterObj(\"\", obj.t_min, obj.t_max) ])\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tobj.chapters = chapters.map(c=>{\r\n\t\tlet a = new PlayBarAnnotation(c, obj.tscale);\r\n\t\ta.y = obj.y;\r\n\t\treturn a;\r\n\t}) // map\r\n\t\r\n\tobj.chapters.forEach(chapter=>{\r\n\t\tobj.node.appendChild(chapter.node)\r\n\t}) // forEach\r\n\t\r\n  } // rebuild\r\n  \r\n  update(){\r\n\tlet obj = this;\r\n\tobj.chapters.forEach(chapter=>{\r\n\t\tchapter.update( obj.t_play, obj.t_buffer );\r\n\t})\r\n  } // update\r\n  \r\n  addchapter(tag){\r\n\t// The player may need to be updated when the serverr pushes updates. Also if other users update the annotations it should appear straightaway.\r\n\tlet obj = this;\r\n\t\r\n\t// tags are required to have a 'starttime'.\r\n\tif(tag.starttime){\r\n\t\tlet i = obj.annotations.findIndex(a=>a.id==tag.id);\r\n\t\tobj.annotations.splice(i, 1, tag);\r\n\t\r\n\t\t// Update the bar.\r\n\t\tobj.rebuild();\r\n\t\tobj.update();\r\n\t} // if\r\n  } // addchapter\r\n} // PlayBar","/*\r\nPLAYBAR only controls the appearance of the playbar, but does not control the playing. It just allows the user interaction with the playbar.\r\n*/\r\n\r\n\r\n\r\n// Helepr to make an html element.\r\nimport {html2element, svg2element, scaleLinear, joinDataToElements} from \"./helpers.js\";\r\n\r\n\r\nimport PlayButton from \"./PlayButton.js\";\r\nimport PlayBar from \"./PlayBar.js\";\r\n\r\n// The canvas will be positioned, and this should be relative to that positioning. Maybe there should be an overall div that contains the canvas and a sibling div that contains all the markup.\r\nlet template = `\r\n<div class=\"player-controls\">\r\n  <svg id=\"playbar\" width=\"100%\" height=\"32px\">\r\n    <g class=\"playbutton\"></g>\r\n    <g class=\"playbar\"></g>\r\n  </svg>\r\n</div>\r\n`; // template\r\n\r\n\r\n\r\n\r\n\r\nexport default class PlayControls{\r\n\t\r\n  textHeight = 12 \r\n  textBottomMargin = 2 \r\n  highlightHeightDelta = 3\r\n\t\r\n  constructor(){\r\n\tlet obj = this;\r\n\t\r\n\tobj.node = html2element(template);\r\n\t\r\n\tlet y = obj.textHeight + obj.textBottomMargin + obj.highlightHeightDelta;\r\n\t\r\n\t// Make a play button.\r\n\tobj.button = new PlayButton();\r\n\tobj.button.y = y;\r\n\tobj.node.querySelector(\"g.playbutton\").appendChild(obj.button.node);\r\n\t\r\n\tobj.button.node.addEventListener(\"click\",event=>{\r\n\t\t// Get the action required based on the button icon.\r\n\t\tif( obj.t_play == obj.t_max ){\r\n\t\t\tobj.t_play = obj.t_min;\r\n\t\t} // if\r\n\t\t\r\n\t\tobj.playing = !obj.playing;\r\n\t}) // addEventListener\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t// The bar is just a node at this point\r\n\tobj.bar = new PlayBar();\r\n\tobj.bar.y = y;\r\n\tobj.node.querySelector(\"g.playbar\").appendChild( obj.bar.node );\r\n\t\r\n\tobj.bar.node.addEventListener(\"click\", event=>{\r\n\t\t// On click the playbar should register the correct time.\r\n\t\t\r\n\t\t// The tscale takes inputs in the svg coordinates, and the event returns them in the client coordinates. Therefore the client coordinates must be adjusted for the position of the SVG.\r\n\t\tlet x1 = event.clientX;\r\n\t\tlet x0 = obj.node.getBoundingClientRect().x\r\n\t\tlet t = obj.bar.tscale.range2dom(x1-x0)\r\n\t\t\r\n\t\t// Now just set the t to the right value, and update the view.\r\n\t\tobj.bar.t_play = t;\r\n\t\tobj.bar.update();\r\n\t\t\r\n\t\t// The playtime changed, therefore pause the video.\r\n\t\tobj.playing = false;\r\n\t\tobj.skipped = true;\r\n\t}) // addEventListener\r\n\t\r\n\t\r\n\tobj.bar.rebuild();\r\n\tobj.bar.update();\r\n\t\r\n\t\r\n\t\r\n\tobj.playing = false;\r\n\tobj.skipped = false;\r\n\t\r\n\t// Annotations. Comments should be based on the chapter tags I think. The discussion is intended to be based on observed events. The logical progress is that events need to first be identified, and then discussed in a separate step. There should be a single dialogue box, and in that one tags can be added. This allows a single comment to be seen in multiple threads. Replies will have to be handled separately. Eventually the user should also be able to pin comments.\r\n\t\r\n  } // constructor\r\n  \r\n  \r\n  set t_domain(t){\r\n\t// Since t is coming from a specific location, it should be the same reference always. Therefore == comparison is valid.\r\n\tlet obj = this;\r\n\tif((t[0] != obj.bar.t_min) || (t[1] != obj.bar.t_max)){\r\n\t  obj.bar.t_min = t[0];\r\n\t  obj.bar.t_max = t[1];\r\n\t  obj.bar.rebuild();\r\n\t  obj.bar.update();\r\n\t} // if\r\n  } // set t_domain\r\n  \r\n  get t_domain(){\r\n\treturn [this.bar.t_min, this.bar.t_max]\r\n  } // get t_domain\r\n  \r\n  \r\n  set playing(v){\r\n\tlet obj = this;\r\n\tobj._playing = v;\r\n\tobj.update(v);\r\n  } // set playing\r\n  \r\n  get playing(){\r\n\treturn this._playing;\r\n  } // get playing\r\n  \r\n  \r\n  // FUNCTIONALITY\r\n  update(){\r\n\tlet obj = this;\r\n\tobj.button.update( obj.playing );\r\n\tobj.bar.update();\r\n  } // update\r\n  \r\n} // PlayControls","export function html2element(html){\r\n  let template = document.createElement('template'); \r\n  template.innerHTML = html.trim(); // Never return a text node of whitespace as the result\r\n  return template.content.firstChild;\r\n} // html2element\r\n\r\nexport function joinDataToElements(data, elements, idAccessor){\r\n  \r\n  // Find data that has no elements, find the elements that have data, and the leftover.\r\n  let elementsArray = [...elements];\r\n  let elementsDataIds = elementsArray.map(el=>idAccessor(el.__data__));\r\n  \r\n  \r\n  let g = elementsArray.reduce((acc,el)=>{\r\n\tlet d = data.filter(d_=>{\r\n\t\treturn idAccessor(el.__data__) == idAccessor(d_)\r\n\t}) // filter\r\n\tif( d.length > 0 ){\r\n\t  el.__data__ = d[0]\r\n\t  acc.update.push(el)\r\n\t} else {\r\n\t  acc.exit.push(el)\r\n\t} // if\r\n\treturn acc\r\n  }, {update: [], exit: []}) // filter\r\n  \r\n  g.enter = data.filter(d=>{\r\n\treturn !elementsDataIds.includes(idAccessor(d))\r\n  }) // filter\r\n  \r\n  return g\r\n} // joinDataToElements","import { html2element } from \"./helpers.js\";\r\n\r\n/*\r\nMaybe this one should be remade into a manager so it can keep add comments to itself. Otherwise they have to be routed outside.\r\n*/\r\nlet css = {\r\n  textarea: `\r\n    width: 100%;\r\n    border: none;\r\n    resize: none;\r\n    overflow: hidden;\r\n    max-height: 100px;\r\n  `,\r\n\r\n  submitbutton: `\r\n    color: white;\r\n\tbackground-color: black;\r\n\tborder-radius: 4px;\r\n\tcursor: pointer;\r\n  `\r\n}; // css\r\n\r\n\r\n\r\nlet template = `\r\n<div>\r\n  <textarea class=\"comment\" type=\"text\" rows=\"1\" placeholder=\"What do you think?\" style=\"${css.textarea}\"></textarea>\r\n  <button class=\"submit\" style=\"${css.submitbutton}\"><b>Submit</b></button>\r\n</div>\r\n`; // template\r\n\r\n\r\nexport default class AddCommentForm{\r\n  _user = \"\"\r\n\r\n  constructor(id){\r\n    let obj = this;\r\n\t\r\n\tobj.node = html2element(template);\r\n\tobj.viewid = id;\r\n\t\r\n\t// Author input got omitted because the author also needs to be known when voting on a comment, and I didn't want to implement an input there. That's why now there will be an overall login box that will control everything.\r\n\tobj.commentinput = obj.node.querySelector(\"textarea.comment\");\r\n\tobj.submitbutton = obj.node.querySelector(\"button.submit\");\r\n\t\r\n\t\r\n\tobj.commentinput.style.display = \"block\";\r\n\tobj.submitbutton.style.display = \"none\";\r\n\t\r\n\t\r\n\tobj.commentinput.oninput = function(){\r\n\t  obj.update();\r\n\t} // oninput\r\n\t\r\n  } // constructor\r\n  \r\n  \r\n  update(){\r\n\tlet obj = this;\r\n\t\r\n\t// Change the height\r\n\tobj.commentinput.style.height = \"1px\";\r\n    obj.commentinput.style.height = (obj.commentinput.scrollHeight)+\"px\";\r\n\t\r\n\t// Show or hide button.\r\n\tobj.submitbutton.style.display = obj.config ? \"block\" : \"none\";\r\n  } // update\r\n  \r\n  \r\n  clear(){\r\n\tlet obj = this;  \r\n\tobj.commentinput.value = \"\";\r\n    obj.update()\r\n  } // clear\r\n  \r\n  set user(name){\r\n\tthis._user = name;\r\n\tthis.update()\r\n  } // set user\r\n  \r\n  get user(){\r\n\treturn this._user;\r\n  } // get user\r\n  \r\n  get config(){\r\n\tlet obj = this;\r\n\treturn obj.commentinput.value && obj.user ? {author: obj.user, viewid: obj.viewid,text: obj.commentinput.value} : false;\r\n  } // config\r\n  \r\n  \r\n  \r\n} // AddCommentForm","import { html2element } from \"./helpers.js\";\r\n\r\nlet css = {\r\n\t\r\n  button: `\r\n    border: none;\r\n\tbackground-color: white;\r\n\tcursor: pointer;\r\n  `,\r\n\t\r\n  replybutton: `\r\n    color: gray;\r\n\tpadding: 0 0 0 0;\r\n  `,\r\n  \r\n  votenumberi: `\r\n    margin-left: 4px;\r\n  `,\r\n  \r\n  timestampspan: `\r\n    color: gray;\r\n\tfont-size: 14px;\r\n\tmargin-left: 12px;\r\n  `\r\n}; // css\r\n\r\nlet template = `\r\n<div class=\"comment\">\r\n  <div class=\"header\">\r\n    <b class=\"author\"></b>\r\n\t<span class=\"timestamp\" style=\"${ css.timestampspan }\"></span>\r\n  </div>\r\n  <div class=\"body\"></div>\r\n  <div class=\"footer\">\r\n    <button class=\"upvote\" style=\"${ css.button }\">\r\n\t  <i class=\"fa fa-thumbs-up\"></i>\r\n\t  <i class=\"vote-number\"></i>\r\n\t</button>\r\n\t<button class=\"downvote\" style=\"${ css.button }\">\r\n\t  <i class=\"fa fa-thumbs-down\"></i>\r\n\t  <i class=\"vote-number\" style=\"${ css.votenumberi }\"></i>\r\n\t</button>\r\n\t<button class=\"reply\" style=\"${css.button} ${ css.replybutton }\"><b>REPLY</b></button>\r\n  </div>\r\n</div>\r\n`; // template\r\n\r\n\r\n\r\nexport default class Comment{\r\n  \r\n  user = \"Default User: Aljaz\"\r\n\t\r\n  constructor(config){\r\n\tlet obj = this;\r\n\t\r\n\t// Make a new node.\r\n\tobj.node = html2element(template);\r\n\t\r\n\t// Fill the template with the options from the config. There must be a comment, and there must be an author.\r\n\tobj.config = config;\r\n\t\r\n\t// Upon creation the author is also the user? True when the user makes them, not otherwise... But the user is updated when the login is initiated.\r\n\tobj.user = obj.config.author;\r\n\t\r\n\t// Fill some options that may not be defined in config.\r\n\tobj.config.time      = config.time ? config.time : Date();\r\n\tobj.config.upvotes   = config.upvotes ? config.upvotes : [];\r\n\tobj.config.downvotes = config.downvotes ? config.downvotes : [];\r\n\tobj.config.tags      = config.tags ? config.tags : [];\r\n\t\r\n\t// Modify the node to reflect the config.\r\n\tlet header = obj.node.querySelector(\"div.header\");\r\n\theader.querySelector(\"b.author\").innerText = config.author;\r\n\t\r\n\tlet body = obj.node.querySelector(\"div.body\");\r\n\tbody.innerText = config.text;\r\n\t\r\n\tobj.update();\r\n\t\r\n\t\r\n\t// Add the upvoting and downvoting. Where will the author name come from?? The upvote/downvote buttons should also be colored depending on whether the current user has upvoted or downvoted the comment already. Maybe the top app should just push the current user to the elements, and then they can figure out how to handle everything. That means that the functionality can be implemented here.\r\n\t\r\n\tlet footer = obj.node.querySelector(\"div.footer\")\r\n\tfooter.querySelector(\"button.upvote\").onclick = function(){\r\n\t\tobj.upvote(obj.user);\r\n\t} // onclick\r\n\t\r\n\tfooter.querySelector(\"button.downvote\").onclick = function(){\r\n\t\tobj.downvote(obj.user);\r\n\t} // onclick\r\n\t\r\n  } // constructor\r\n  \r\n  get id(){\r\n\tlet obj = this;\r\n\treturn [obj.config.viewid, obj.config.author, obj.config.time].join(\" \");\r\n  } // get id\r\n  \r\n  update(){\r\n\t// Only the time is allowed to be updated (if it will be calculated back), and the up and down votes.\r\n\tlet obj = this;\r\n\t\r\n\tobj.updateTimestamp();\r\n\t\r\n\tobj.updateVoteCounter(\"upvote\");\r\n\tobj.updateVoteCounter(\"downvote\");\r\n\t\r\n  } // update\r\n\t\r\n  updateTimestamp(){\r\n\tlet obj = this;\r\n\t\r\n\tlet timestamp = obj.node\r\n\t  .querySelector(\"div.header\")\r\n\t  .querySelector(\"span.timestamp\");\r\n\t\r\n\t// Dates are saved as strings for ease of comprehension. For formatting they are first translated into miliseconds passed since 1970.\r\n\tlet t = obj.config.time;\r\n\tlet now = Date.now();\r\n\tlet stamp = Date.parse(t);\r\n\t\r\n\tlet dayInMiliseconds = 1000*60*60*24;\r\n\tlet todayInMiliseconds = getDayInMiliseconds(now);\r\n\t\r\n\t// Format the time so that it shows everything from today as n minutes/hours ago, everything from yesterday as yesterday at :... and everything else as the date. \r\n\tif( stamp > now - todayInMiliseconds ){\r\n\t\t// This was today, just report how long ago.\r\n\t\ttimestamp.innerText = getAgoFormattedString(now - stamp);\r\n\t} else if (stamp > now - todayInMiliseconds - dayInMiliseconds){\r\n\t\t// Yesterday at HH:MM\r\n\t\ttimestamp.innerText = `Yesterday at ${t.split(\" \").splice(4,1)[0]}`;\r\n\t} else {\r\n\t\t// Just keep the first 4 parts which should be day name, month name, day number, year number\r\n\t\ttimestamp.innerText = t.split(\" \").splice(0,4).join(\" \")\r\n\t} // if\r\n\t\r\n  } // updateTimestamp\r\n\r\n\r\n  updateVoteCounter(buttonClassName){\r\n\tlet obj = this;\r\n\t\r\n\tlet button = obj.node\r\n\t  .querySelector(\"div.footer\")\r\n\t  .querySelector(`button.${ buttonClassName }`)\r\n\t\r\n\t\r\n\tlet icon = button.querySelector(\"i.fa\");\r\n\tlet counter = button\r\n\t  .querySelector(\"i.vote-number\");\r\n\t\r\n\tlet n = 0;\r\n\tswitch( buttonClassName ){\r\n\t  case \"upvote\":\r\n\t\tn = obj.config.upvotes.length;\r\n\t\tcounter.innerText = n > 0 ? n : \"\";\r\n\t\ticon.style.color = obj.config.upvotes.includes(obj.user) ? \"green\" : \"black\";\r\n\t\tbreak;\r\n\t  case \"downvote\":\r\n\t\tn = obj.config.downvotes.length;\r\n\t\tcounter.innerText = n > 0 ? -n : \"\";\r\n\t\ticon.style.color = obj.config.downvotes.includes(obj.user) ? \"tomato\" : \"black\";\r\n\t\tbreak;\r\n\t} // switch\r\n\r\n  } // updateVoteCounter\r\n\t\r\n  \r\n  // Maybe these should also allow the neutering of an upvote/downvote?\r\n  upvote(author){\r\n\tlet obj = this;\r\n\tpushValueToAWhichCompetesWithB(author, obj.config.upvotes, obj.config.downvotes);\r\n\tobj.update();\r\n  } // upvote\r\n\t\r\n  downvote(author){\r\n\tlet obj = this;\r\n\tpushValueToAWhichCompetesWithB(author, obj.config.downvotes, obj.config.upvotes);\r\n\tobj.update();\r\n  } // upvote\r\n  \r\n} // Comment\r\n\r\n\r\nfunction pushValueToAWhichCompetesWithB(value, A, B){\r\n    if(!A.includes(value)){\r\n\t  A.push(value)\r\n\t  if(B.includes(value)){\r\n\t\tB.splice(B.indexOf(value), 1)\r\n\t  } // if\r\n\t} // if\r\n  } // pushValueToAWhichCompetesWithB\r\n  \r\n  \r\n  \r\nfunction getDayInMiliseconds(msdate){\r\n\t// 'msdate' is a date in miliseconds from 1970. Calculate how many miliseconds have already passed on the day that msdate represents.\r\n\tvar d = new Date(msdate);\r\n\treturn ( ( d.getHours()*60 + d.getMinutes() )*60 + d.getSeconds() )*1000 + d.getMilliseconds();\r\n} // getDayInMiliseconds\r\n\r\n\r\nfunction getAgoFormattedString(delta){\r\n\t// delta is the number of miliseconds ago for which this should return a human readable string. If delta is more than a day, then the result is returned as days.\r\n\t\r\n\t\r\n\tlet seconds = Math.floor( delta/1000 );\r\n\tlet minutes = Math.floor( seconds/60 );\r\n\tlet hours   = Math.floor( minutes/60 );\r\n\tlet days    = Math.floor( hours/24 );\r\n\t\r\n\tif(days > 0){\r\n\t\treturn `${days} days ago`;\r\n\t} // if\r\n\t\r\n\tif(hours > 0){\r\n\t\treturn `${hours} hours ago`;\r\n\t} // if\r\n\t\r\n\tif(minutes > 0){\r\n\t\treturn `${minutes} minutes ago`;\r\n\t} // if\r\n\t\r\n\treturn `${seconds} seconds ago`\r\n\t\r\n} // getAgoFormattedString\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { html2element } from \"./helpers.js\";\r\nimport Comment from \"./Comment.js\";\r\n\r\nexport default class ReplyComment extends Comment{\r\n  constructor(config){\r\n    super(config)\r\n\tlet obj = this;\r\n\t\r\n\t// The secondary comments need to be indented.\r\n\tobj.node.style.marginLeft = \"20px\";\r\n\t\r\n\t// Replies can't be replied to. Maybe allow them too, but just put a hashtagged name in front?\r\n\tobj.node.querySelector(\"button.reply\").remove();\r\n\t\r\n  } // constructor\r\n} // ReplyComment","import { html2element } from \"./helpers.js\";\r\nimport Comment from \"./Comment.js\";\r\nimport ReplyComment from \"./ReplyComment.js\";\r\n\r\n// If a general comment owns its replies, then keeping the replies in control is easy. What happens when someone else make a reply on a separate client though, and the data is just pushed to this client? How should the reply be added to the right parent? Maybe the reply should have an identifier that can be constructed from the comment (e.g. view id + author name + time), and that can be used to merge the comments. Then everytime a comment is pushed to the storage an update can be fired? Also, how will the changes be communicated back to the server? Let the backend handle the updates - just find the comment with the proper id, and resolve the differences, and then push any comments that had differences. Maybe it's simpler to just adjust everything when the connection closes?\r\n\r\n// Sort the comments before passing them to the comments below. How will replies be updated? Ultimately everything should be coming from the server??\r\n\r\n\r\n// This is just a template for the controls which allow the replies to be expanded or collapsed. These are invisible at first.\r\nlet template = `\r\n<div style=\"display: none;\">\r\n  <div class=\"expand-controls\" style=\"color: blue; cursor: pointer;\">\r\n    <i class=\"fa fa-caret-down\"></i>\r\n\t<i class=\"control-text\">View replies</i>\r\n  </div>\r\n  <div class=\"replies\" style=\"display: none;\"></div>\r\n</div>\r\n`\r\n\r\n// Maybe the general comments can be added on top, but the replies should follow in chronological order.\r\nexport default class GeneralComment extends Comment{\r\n  \r\n  replies = [];\r\n  \r\n  constructor(config){\r\n    super(config)\r\n\tlet obj = this;\r\n\t\r\n\t// The general comment can have replies associated with it. Handle these here. Furthermore an additional control for expanding, reducing hte comments is required.\r\n\tobj.replynode = html2element(template);\r\n\tobj.node.appendChild( obj.replynode );\r\n\t\r\n\t// Add the functionality to the caret.\r\n\tobj.repliesExpanded = false;\r\n\tobj.replynode.querySelector(\"div.expand-controls\").onclick = function(){\r\n\t    obj.repliesExpanded = !obj.repliesExpanded;\r\n\t\tobj.update();\r\n\t} // onclick\r\n\t\r\n\t// Replies on the config need to be initialised. But actually, they should be stored as separate entries for ease of updating...\r\n\t\r\n\tobj.update();\r\n  } // constructor\r\n  \r\n  reply(replyconfig){\r\n\t// Replies can also need to be updated if the server pushes an updated version. In that case handle the replacement here.\r\n\tlet obj = this;\r\n\t\r\n\t// Make a comment node, and append it to this comment.\r\n\treplyconfig.parentid = obj.id;\r\n\tlet r = new ReplyComment(replyconfig);\r\n\t\r\n\tlet existing = findArrayItemById(obj.replies, r.id);\r\n\tif(existing){\r\n\t  obj.replaceReply(existing, r);\r\n\t} else {\r\n\t  // Add this one at the end.\r\n\t  obj.replynode.querySelector(\"div.replies\").appendChild(r.node);\r\n\t  obj.replies.push(r);\t\r\n\t} // if\r\n\t\r\n\t// Update the view.\r\n\tobj.update();\r\n  } // reply\r\n  \r\n  replaceReply(existing, replacement){\r\n\t// For simplicity handle the replacing of hte comment here.\r\n\tlet obj = this;\r\n\t\r\n\t// Update the internal comments store.\r\n\tobj.replies.splice(obj.replies.indexOf(existing), 1, replacement);\r\n\t\r\n\t// Update teh DOM.\r\n\tlet container = obj.node.querySelector(\"div.replies\");\r\n\tcontainer.insertBefore(replacement.node, existing.node);\r\n  } // replaceReply\r\n  \r\n  \r\n  update(){\r\n\t// Only the time is allowed to be updated (if it will be calculated back), and the up and down votes.\r\n\tlet obj = this;\r\n\t\r\n\t// From superclass\r\n\tobj.updateTimestamp();\r\n\tobj.updateVoteCounter(\"upvote\");\r\n\tobj.updateVoteCounter(\"downvote\");\r\n\t\r\n\t// GeneralComment specific.\r\n\tobj.updateReplies();\r\n  } // update\r\n  \r\n  updateReplies(){\r\n\tlet obj = this;\r\n\t\r\n\t// First update is called when the superclass constructor is called.\r\n\tif(obj.replies){\r\n\t  let n = obj.replies.length;\r\n\t  obj.replynode.style.display = n > 0 ? \"\" : \"none\";\r\n\t\r\n\t  // View replies or hide replies\r\n\t  let s = n == 1 ? \"y\" : `ies (${n})`\r\n\t  obj.replynode\r\n\t    .querySelector(\"div.expand-controls\")\r\n\t    .querySelector(\"i.control-text\")\r\n\t    .innerText = obj.repliesExpanded ? `Hide repl${s}` : `View repl${s}`;\r\n\t\t\r\n\t  obj.replynode\r\n\t    .querySelector(\"div.expand-controls\")\r\n\t    .querySelector(\"i.fa\")\r\n\t    .classList.value = obj.repliesExpanded ? \"fa fa-caret-up\" : \"fa fa-caret-down\";\r\n\t\r\n\t  obj.replynode.querySelector(\"div.replies\").style.display = obj.repliesExpanded ? \"\" : \"none\";\r\n\t} // if\r\n  } // updateReplies\r\n  \r\n} // GeneralComment\r\n\r\nfunction findArrayItemById(A, id){\r\n  let candidates = A.filter(a=>{\r\n\treturn a.id == id;\r\n  }) // filter\r\n  \r\n  return candidates.length > 0 ? candidates[0] : false;\r\n} // findArrayItemById","import { html2element, joinDataToElements } from \"./helpers.js\";\r\n\r\nlet template = `\r\n<div style=\"margin-bottom: 5px;\"></div>\r\n`; // template\r\n\r\n// Maybe make them grey with italis writing?\r\nlet css = `\r\nborder: none;\r\nbackground-color: gainsboro;\r\nmargin-right: 2px;\r\ncursor: pointer;\r\n`; // css\r\n\r\nlet tagtemplate = `\r\n<button style=\"${ css }\"><i></i></button>\r\n`;\r\n\r\n// A general tag should always be present. This tag should then show all comments without tags.\r\nexport default class DiscussionSelector{\r\n  \r\n  tags = []\r\n  selected = [] \r\n  \r\n  \r\n  constructor(){\r\n    let obj = this;\r\n\tobj.node = html2element(template);\r\n\t\r\n\t\r\n  } // constructor\r\n  \r\n  update(newtags){\r\n\tlet obj = this;\r\n\r\n\tif(newtags){\r\n\t  // Replace the tags if necessary. The same tags should be grouped together, but different authors may have differing views on what constitutes features.\r\n\t  obj.tags = newtags;\r\n\t  obj.selected = obj.selected.filter(d=>newtags.includes(d));\r\n\t  obj.externalAction();\r\n\t} // if\r\n\r\n\tlet buttons = joinDataToElements(obj.tags, obj.node.querySelectorAll(\"button\"), d=>d);\r\n\t\r\n\tbuttons.enter.forEach(d=>{\r\n\t\tlet el = html2element(tagtemplate);\r\n\t\tobj.node.appendChild( el );\r\n\t\tel.querySelector(\"i\").innerText = d;\r\n\t\tel.__data__ = d;\r\n\t\t\r\n\t\tel.onclick = function(){\r\n\t\t\tobj.toggle(el);\r\n\t\t} // onclick\r\n\t}) // forEach\r\n\t\r\n\tbuttons.exit.forEach(button=>button.remove())\r\n\t  \r\n  } // update\r\n  \r\n  toggle(el){\r\n\tlet obj = this;\r\n\tif(obj.selected.includes(el.__data__)){\r\n\t\tobj.selected.splice(obj.selected.indexOf(el.__data__),1);\r\n\t\tel.style.fontWeight = \"\";\r\n\t} else {\r\n\t\tobj.selected.push(el.__data__)\r\n\t\tel.style.fontWeight = \"bold\";\r\n\t} // if\r\n\t\r\n\tobj.externalAction();\r\n  } // toggle\r\n  \r\n  // Placeholder that will allow the actual comments to be hidden. Maybe just name it that?\r\n  externalAction(){} // externalAction\r\n} // DiscussionSelector","import { html2element } from \"./helpers.js\";\r\nimport AddCommentForm from \"./AddCommentForm.js\";\r\nimport GeneralComment from \"./GeneralComment.js\"; \r\nimport DiscussionSelector from \"./DiscussionSelector.js\";\r\n\r\n// Needs a way to minimise the commenting completely.\r\nlet template = `\r\n<div class=\"commenting\" style=\"width:300px;\">\r\n  <div class=\"hideShowText\" style=\"cursor: pointer; margin-bottom: 5px; color: gray;\">\r\n    <b class=\"text\">Show comments</b>\r\n\t<b class=\"counter\"></b>\r\n\t<i class=\"fa fa-caret-down\"></i>\r\n  </div>\r\n  <div class=\"commentingWrapper\" style=\"display: none;\">\r\n    <div class=\"comment-form\"></div>\r\n    <hr>\r\n    <div class=\"comment-tags\"></div>\r\n    <div class=\"comments\" style=\"overflow-y: auto; max-height: 200px;\"></div>\r\n  </div>\r\n</div>\r\n`; // template\r\n\r\n\r\nexport default class CommentingManager{\r\n  constructor(id){\r\n    let obj = this;\r\n\tobj.node = html2element( template );\r\n\tobj.viewid = id;\r\n\tobj.comments = [];\r\n\t\r\n\t// Make the form;\r\n    obj.form = new AddCommentForm(id);\r\n    obj.node\r\n\t  .querySelector(\"div.comment-form\")\r\n\t  .appendChild(obj.form.node);\r\n  \r\n    // Make both replies and general comments to use a single form.\r\n    obj.form.submitbutton.onclick = function(){\r\n\t  let config = obj.form.config;\r\n\t  if(config){\r\n\t    // The form should only be cleared if a comment was successfully added.\r\n\t    config.tags = obj.discussion.selected.map(d=>d);\r\n\t\tobj.add(config);\r\n\t    obj.form.clear();\r\n\t  } // if\r\n    } // onclick\r\n\t\r\n\t\r\n\t// Add the comment tags, which serve as selectors of the discussion topics. This should be another module. At the saem time this one will have to update when the module is updated. Maybe the placeholder reactions function should just be defined here??\r\n\tobj.discussion = new DiscussionSelector();\r\n    obj.node\r\n\t  .querySelector(\"div.comment-tags\")\r\n\t  .appendChild(obj.discussion.node);\r\n    // obj.discussion.update([\"#vortex\", \"#shock\"])\r\n\tobj.discussion.externalAction = function(){\r\n\t\tobj.hideNonDiscussionComments();\r\n\t} // externalAction\r\n\t\r\n\t\r\n\t// At the beginning show only general comments? Better yet, show no comments.\r\n\tobj.hideNonDiscussionComments();\r\n\t\r\n\t\r\n\t// Finally add teh controls that completely hide comments.\r\n\tlet hsdiv = obj.node.querySelector(\"div.hideShowText\");\r\n\tlet cdiv = obj.node.querySelector(\"div.commentingWrapper\");\r\n\thsdiv.onclick = function(){\r\n\t  let hidden = cdiv.style.display == \"none\";\r\n\t  cdiv.style.display = hidden ? \"\" : \"none\";\r\n\t  \r\n\t  // It changed from hidden to show, but hidden is past state.\r\n\t  hsdiv.querySelector(\"b.text\").innerText = hidden ? \"Hide comments\" : \"Show comments\";\r\n\t  hsdiv.querySelector(\"i\").classList.value = hidden ? \"fa fa-caret-up\" : \"fa fa-caret-down\";\r\n\t} // onclick\r\n\t\r\n  } // constructor\r\n  \r\n  hideNonDiscussionComments(){\r\n\tlet obj = this;\r\n\tobj.comments.forEach(comment=>{\r\n      // This should really be select any!\r\n\t  let pertinent = (obj.discussion.selected.length == 0) \r\n\t               || (obj.discussion.selected.some(d=>comment.config.tags.includes(d)));\r\n\t  comment.node.style.display = pertinent ? \"\" : \"none\";\r\n\t}) // forEach\r\n  } // hideNonDiscussionComments\r\n  \r\n  \r\n  updateCommentCounter(){\r\n\tlet obj = this;\r\n\t\r\n\tlet n = obj.comments.reduce((acc,c)=>{\r\n\t\tacc += 1\r\n\t\tacc += c.replies.length;\r\n\t\treturn acc\r\n\t},0)\r\n\tlet counterNode = obj.node\r\n\t  .querySelector(\"div.hideShowText\")\r\n\t  .querySelector(\"b.counter\");\r\n\tcounterNode.innerText = n ? `(${n})` : \"\";\r\n\t\r\n  } // updateCommentCounter\r\n  \r\n  \r\n  submit(config){\r\n\t// This function is called when the button is pressed. By default it just routes the comment to 'add' so that the comment is added straight away. Alternately it should be passed to the server first. Maybe it's good if both things are done in cases when the connection is not good?\r\n\tthis.add(config);\r\n  } // submit\r\n  \r\n  \r\n  add(config){\r\n\t// When the comments are loaded from the server they will be added through this interface. Therefore it must handle both the primary and secondary comments.\r\n\tlet obj = this;\r\n\t\r\n\tif(config.parentid){\r\n\t  // Comments that have a parent id are replies. Find the right parent comment.\r\n\t  obj.addReplyComment(config);\r\n\t} else {\r\n\t  // It's a general comment. \r\n\t  obj.addGeneralComment(config);\r\n\t} // if\r\n\t\r\n\t// Update the comments count.\r\n\tobj.hideNonDiscussionComments();\r\n\tobj.updateCommentCounter();\r\n  } // add\r\n  \r\n  addReplyComment(config){\r\n\tlet obj = this;\r\n\t\r\n\tlet parent = findArrayItemById(obj.comments, config.parentid);\r\n\tif(parent){\r\n\t  parent.reply(config);\r\n\t} // if\r\n  } // addReplyComment\r\n  \r\n  addGeneralComment(config){\r\n\tlet obj = this;\r\n\t  \r\n\t// If there is an existing one, that one should be updated. Whatever is coming from the server is the truth. Maybe it'll be simpler just to replace the comment in that case?? The comment config does not contain hte comment id, which is computed....\r\n\t\r\n\t\r\n\t// Generally new comments should be attached at teh top. Here the attachment point is variable to reuse this method as a way to replace an existing comment with the same id.\r\n\t\r\n\t\r\n\tlet c = new GeneralComment(config);\r\n\t\r\n\t// Remove the existing one, and replace it with the current one.\r\n\tlet existing = findArrayItemById(obj.comments, c.id)\r\n\tif(existing){\r\n\t  obj.replaceGeneralComment(existing, c);\r\n\t} else {\r\n\t\t\r\n\t  obj.comments.push(c);\r\n\t  \r\n\t  // Add the functionality to add secondary comments:\r\n\t  c.node.querySelector(\"button.reply\").onclick = function(){\r\n\t    if(obj.form.config){\r\n\t\t  c.reply(obj.form.config);\r\n\t\t  obj.form.clear();\r\n\t    } // if\r\n\t  } // onclick\r\n\t\r\n\t  // Insert the new comment at teh very top.\r\n\t  let container = obj.node.querySelector(\"div.comments\");\r\n\t  container.insertBefore(c.node, container.firstChild);\r\n\t} // if\r\n  } // addGeneralComment\r\n  \r\n  \r\n  replaceGeneralComment(existing, replacement){\r\n\t// For simplicity handle the replacing of hte comment here.\r\n\tlet obj = this;\r\n\t\r\n\t// Update the internal comments store.\r\n\tobj.comments.splice(obj.comments.indexOf(existing), 1, replacement);\r\n\t\r\n\t// Update teh DOM.\r\n\tlet container = obj.node.querySelector(\"div.comments\");\r\n\tcontainer.insertBefore(replacement.node, existing.node);\r\n  } // replaceGeneralComment\r\n  \r\n  get user(){\r\n\treturn this.form.user;\r\n  } // get user\r\n  \r\n  set user(name){\r\n\tlet obj = this;\r\n\t\r\n\t// The form has a change of author.\r\n\tobj.form.user = name;\r\n\t\r\n\t// The comment appearance and functionality changes depends on who is checking them.\r\n\tobj.comments.forEach(comment=>{\r\n\t  comment.user = name;\r\n\t  comment.update();\r\n\t}) // forEach\r\n  } // set user\r\n  \r\n  getCommentsForSaving(){\r\n\t// The obj.comments is an array of GeneralComment instances, and just the configs have to be collected before being passed on. Collect them here.\r\n\tlet obj = this;\r\n\t// Note that the general comments hold the reply comments. Extract the secondary comments here and store them in a single layer array for ease of updating the changes on the server.\r\n\treturn obj.comments.reduce((acc,comment)=>{\r\n\t\tacc.push(comment.config)\r\n\t\tacc.push(...comment.replies.map(reply=>reply.config))\r\n\t\treturn acc\r\n\t},[])\r\n  } // getCommentsForSaving\r\n  \r\n} // CommentingManager\r\n\r\n\r\nfunction findArrayItemById(A, id){\r\n  let candidates = A.filter(a=>{\r\n\treturn a.id == id;\r\n  }) // filter\r\n  \r\n  return candidates.length > 0 ? candidates[0] : false;\r\n} // findArrayItemById\r\n\r\nfunction arrayIncludesAll(A,B){\r\n  // 'arrayIncludesAll' checks if array A includes all elements of array B. The elements of the arrays are expected to be strings.\r\n\t\r\n  // Return element of B if it is not contained in A. If the response array has length 0 then A includes all elements of B, and 'true' is returned.\r\n  var f = B.filter(function(b){\r\n\treturn !A.includes(b)\r\n  })\r\n\t\r\n  return f.length == 0? true : false\r\n} // arrayIncludesAll\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {html2element} from \"./helpers.js\";\r\n\r\nlet css = {\r\n  button: `\r\n    border: none;\r\n\tcursor: pointer;\r\n\tborder-radius: 4px;\r\n  `,\r\n  \r\n  timebutton: `\r\n    background-color: gainsboro;\r\n  `,\r\n  \r\n  submitbutton: `\r\n    background-color: black;\r\n\tcolor: white;\r\n  `\r\n}; // css\r\n\r\n\r\nlet template = `\r\n<div style=\"300px\">\r\n  <input type=\"text\" placeholder=\"#tag-name\" style=\"width: 100px;\"></input>\r\n  \r\n  <div style=\"display: inline-block; float: right;\">\r\n  <button class=\"starttime\" style=\"${ css.button } ${css.timebutton}\">start</button>\r\n  <i>-</i>\r\n  <button class=\"endtime\" style=\"${ css.button } ${css.timebutton}\">end</button>\r\n  <button class=\"submit\" style=\"${ css.button } ${css.submitbutton}\">\r\n    Submit\r\n  </button>\r\n  </div>\r\n  \r\n  \r\n</div>\r\n`; // template\r\n\r\nexport default class ChapterForm{\r\n  \r\n  user = \"Default user: Aljaz\"\r\n  \r\n  constructor(){\r\n    let obj = this;\r\n\tobj.node = html2element(template);\r\n\t\r\n\tobj.input = obj.node.querySelector(\"input\");\r\n\t\r\n\t// This value will be overwritten during interactions, and is where the tag manager collects the time for the timestamps.\r\n\tobj.t = 0;\r\n\tobj.clear();\r\n\t// The button should cycle through black, green, and red. It will need some way of tracking its current state, and a way to load in existing tags! This will allow users to subsequently change the tag if needed? Maybe this is a bit much for now. It will need a submit button.\r\n\t// If the tag is loaded and the button switches to timestamping then any user can add the ned timesteps. Then the users name needs to be checked in addition. Maybe some way of filtering out the tags that are added? How would that work?\r\n\t// For now add 3 buttons. A starttime endtime and submit button. For the submit button only the start and name need to be filled in. The buttons must also show the selected times!\r\n\t\r\n\t// If one of the times is set, it should check with the other time to make sure it's set correctly.\r\n\t\r\n\t\r\n\tobj.node.querySelector(\"button.starttime\").onclick = function(){\r\n\t\tobj.starttime = obj.t;\r\n\t\tobj.update();\r\n\t} // onclick\r\n\t\r\n\tobj.node.querySelector(\"button.endtime\").onclick = function(){\r\n\t\tobj.endtime = obj.t;\r\n\t\tobj.update();\r\n\t} // onclick\r\n\t\r\n\tobj.node.querySelector(\"button.submit\").onclick = function(){\r\n\t\tlet tag = obj.tag;\r\n\t\tif(tag){\r\n\t\t\tobj.submit(tag);\r\n\t\t\tobj.clear()\r\n\t\t} // if\r\n\t} // onclick\r\n\t\r\n  } // constructor\r\n  \r\n  update(){\r\n\tlet obj = this;\r\n\t\r\n\t// Ensure that the times are always consistent (end > start);\r\n\tif(obj.endtime && obj.starttime){\r\n\t\tlet t0 = Math.min(obj.starttime, obj.endtime);\r\n\t\tlet t1 = Math.max(obj.starttime, obj.endtime);\r\n\t\tobj.starttime = t0;\r\n\t\tobj.endtime = t1;\r\n\t} // if\r\n\t\r\n\t// Update the time tags also.\r\n\tlet it0 = obj.node.querySelector(\"button.starttime\");\r\n\tlet it1 = obj.node.querySelector(\"button.endtime\");\r\n\t\r\n\tit0.innerText = (obj.starttime != undefined) ? obj.starttime.toFixed(3) : \"start\";\r\n\tit1.innerText = (obj.endtime != undefined) ? obj.endtime.toFixed(3) : \"end\";\r\n\t\r\n\t\r\n\t// The button is black by default, and making it look disabled is a bit more involved.\r\n\tlet button = obj.node.querySelector(\"button.submit\");\r\n\tif(obj.tag){\r\n\t\t// Enable.\r\n\t\tbutton.style.opacity = 1;\r\n\t\tbutton.style.backgroundColor = \"black\";\r\n\t\tbutton.style.color = \"white\";\r\n\t} else {\r\n\t\tbutton.style.opacity = 0.6;\r\n\t\tbutton.style.backgroundColor = \"gainsboro\";\r\n\t\tbutton.style.color = \"black\";\r\n\t} // if\r\n  } // update\r\n  \r\n  clear(){\r\n\tlet obj = this;\r\n\tobj.starttime = undefined;\r\n\tobj.endtime = undefined;\r\n\tobj.input.value = \"\";\r\n\tobj.update();\r\n  } // clear\r\n  \r\n  get tag(){\r\n\t// Chapter tag should belong to the task id so that the observations across multiple slices are available together to the user.\r\n\tlet obj = this;\r\n\t// The time should be defined, but it can also be 0, or less than 0!\r\n\treturn obj.user && obj.input.value && ( obj.starttime != undefined ) ? { \r\n\t\ttaskId: obj.taskId,\r\n\t\tlabel: obj.input.value,\t\r\n\t\tauthor: obj.user,  \r\n\t\tstarttime: obj.starttime, \r\n\t\tendtime: obj.endtime,\r\n\t\tid: `${obj.user} ${Date()}`\r\n\t} : false; \r\n  } // tag\r\n\r\n  // Placeholder for communication between classes.\r\n  submit(tag){} // submit\r\n} // ChapterForm","import PlayControls from \"./playbar/PlayControls.js\";\r\nimport CommentingManager from \"./commenting/src/CommentingManager.js\";\r\nimport ChapterForm from \"./playbar/ChapterForm.js\";\r\n\r\n\r\n// DONE: Which annotations should be seen on the playbar? Just the current users, or those of otehr users as well? Capturing all annotations would allow feature tracking for example. But it may clutter the play bar. \r\n\t\r\n// On the other hand, when discussing the tags it's good to avoid misunderstaning.\r\n\r\n// Furthermore, it would be good to just accept someone elses tags. What about clicking on the users name? Then select adopting their annotations? How do you revert back? A clear all button? Allow reloading of annotations for editing??\r\n\t\r\n// Anyway, the commenting should show all possible annotations.\r\n\t\r\n// What about showing the most popular annotations by default?? Ideally, the annotations would show up when the comment addressing them would be hovered over.\r\n\r\n\r\n\r\n\r\nexport default class interactivePlayerUI{\r\n  constructor(id){\r\n\tlet obj = this;\r\n\tobj.viewid = id;\r\n\tobj.node = document.createElement(\"div\");\r\n\t\r\n\t// Add in a playbar\r\n\tobj.playcontrols = new PlayControls();\r\n\tobj.node.appendChild( obj.playcontrols.node );\r\n\t\r\n\t\r\n\t// The tag adding.\r\n\tobj.chapterform = new ChapterForm();\r\n\tobj.node.appendChild( obj.chapterform.node )\r\n\t\r\n\t// Add in the commenting system. The metadata filename is used as the id of this 'video', and thus this player. The node needs to be added also.\r\n\tobj.commenting = new CommentingManager( id );\r\n\tobj.node.appendChild( obj.commenting.node );\r\n\t\r\n\t\r\n\t//  Tags need to be pushed to the playbar, but also to the commenting! Should individual tags be allowed to influence the navigation? I guess so?\r\n\tobj.chapterform.submit = function(tag){\r\n\t\tobj.playcontrols.bar.addchapter(tag);\r\n\t\t\r\n\t\tlet discussiontags = obj.playcontrols.bar.annotations.map(a=>a.label);\r\n\t\tobj.commenting.discussion.update(discussiontags);\r\n\t} // submit\r\n\t\r\n\t\r\n\t// Add onhover events to the tagged keywords in the text? That allows the user to show exactly which part of the data they meant, and also to compare it to others interpretations.\r\n\t\r\n\t// What happens when the user replies in a thread for which he does not have an annotation for? For replies, it's the parent annotations that get pasted in. But what if you're making a general comment without having the playbar annotations? Which one should get selected? Or should just the text tags be retained? But in that case I can't show the different versions. Maybe keep the tag names, but also keep the annotations separate - that way they can only be added for mouseover if they're in hte text? And in the text they need to be marked using a #? But then no disagreements with the thread parent comment are possible... How to deal with this? Only allow the user to use their own annotations?\r\n\t\r\n\t// Anyyyyyway, first include the tree navigation\r\n\t\r\n\t\r\n\t\r\n  } // constructor\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  /*\r\n  Getters and setters to simplify the API:\r\n\tt_domain\r\n\tt\r\n\tplaying\r\n\tskipped\r\n\tuser\r\n  */ \r\n\r\n  get playing(){\r\n\treturn this.playcontrols.playing;\r\n  } // get playing\r\n  \r\n  get skipped(){\r\n\treturn this.playcontrols.skipped;\r\n  } // get skipped\r\n  \r\n  set skipped(v){\r\n\tthis.playcontrols.skipped = false;\r\n  } // set skipped\r\n  \r\n  get t_play(){\r\n\treturn this.playcontrols.bar.t_play;\r\n  } // get t_play\r\n  \r\n  set t_play(t){\r\n\tthis.chapterform.t = t;\r\n\tthis.playcontrols.bar.t_play = t;\r\n\tthis.playcontrols.bar.update();\r\n  } // set t_play\r\n  \r\n  get t_domain(){\r\n\treturn this.playcontrols.t_domain;\r\n  } // get t_domain\r\n  \r\n  set t_domain(t){\r\n\tthis.playcontrols.t_domain = t;\r\n  } // set t_domain\r\n  \r\n  get user(){\r\n\t// The annotation form is the primary annotation.\r\n\treturn this.chapterform.user\r\n  } // get user\r\n  \r\n  set user(name){\r\n\tthis.commenting.user = name;\r\n\tthis.chapterform.user = name;\r\n  } // set user\r\n  \r\n  set metadata(m){\r\n\tthis._metadata = m;\r\n\tthis.chapterform.taskId = m.taskId;\r\n  } // set metadata\r\n  \r\n  get metadata(){\r\n\treturn this._metadata;\r\n  } // set metadata\r\n  \r\n} // interactivePlayerUI\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { html2element } from \"./helpers.js\";\r\n\r\n/* \r\nUnsteadyPlayer2D is the actual small multiple\r\nViewFrame2D controls the viewport and user interactions\r\nCamera2D keeps track of the user itneractions\r\nPlayBar handles the playbar interactivity\r\nMeshRenderer2D actually does the GPU drawing\r\n*/\r\n\r\n\r\nimport ViewFrame2D from \"./ViewFrame2D.js\";\r\nimport Mesh2D from \"../geometry/Mesh2D.js\";\r\n\r\n\r\n\r\n// Load in hte external modules. Should all this be wrapped up in one item?\r\nimport InteractivePlayerUI from \"../components/ui/InteractivePlayerUI.js\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// How to actually perform the playing? First, just allow a small multiple to play itself. When the button is pressed the player becomes 'active'. The UnsteadyPlayer must be given the fps at which the data should change. Then when the internal document timestamp passes another full timestep from the beginning of the document it changes the data. The data must be ready beforehand though.\r\n\r\n\r\n// It's advantageous to inherit from ViewFrame2D because the geometry changes on the go - first some dummy geometry is specified, and after the actual geometry is loaded in that just gets automatically used on next FrameAnimationRate step. If the ViewFrame is a module then the UnsteadyPlayer has to monitor when the geometry changes, and update the ViewFrame accordingly.\r\n// Because it's advantageous to inherit from ViewFrame2D it is also advantageous to create the outside html player wrapper in it. Then the unsteady player only needs to add other modules into it.\r\nexport default class UnsteadyPlayer2D extends ViewFrame2D {\r\n  constructor(gl, unsteadyMetadataFilename){\r\n    super(gl)\r\n\tlet obj = this;\r\n\t\r\n\t// Actual geometry to be drawn.\r\n\tobj.geometry = new Mesh2D(gl, unsteadyMetadataFilename);\r\n\t\r\n\t// The FPS at which to swap out data.\r\n\tobj.fps = 24;\r\n\tobj.dt = 1000 / obj.fps;\r\n\tobj.timelastdraw = 0;\r\n\t\r\n\t\r\n\t\r\n\t// Add in precofigured UI. The metadata filename identifies this small multiple.\r\n\tobj.ui = new InteractivePlayerUI(unsteadyMetadataFilename);\r\n\tobj.node.appendChild( obj.ui.node )\r\n\t\r\n  } // constructor\r\n  \r\n  update(now){\r\n\tlet obj = this;\r\n\t\r\n\t// Compute the view matrices\r\n    obj.computeModelMatrix();\r\n    obj.computeViewMatrix();\r\n    obj.computeOrthographicMatrix();\r\n\t\r\n\t// Will the rendering loop have to be redone in order to allow promises to be returned to ensure that the player is ready for the next step?\r\n\tif(now > obj.timelastdraw + obj.dt){\r\n\t  if( obj.ui.playing ){\r\n\t\tobj.timelastdraw = now;\r\n\t\tobj.incrementTimeStep();\r\n\t  } else if ( obj.ui.skipped ){\r\n\t\tobj.timelastdraw = now;\r\n\t\tobj.incrementTimeStep(0)\r\n\t\tobj.ui.skipped = false;\r\n\t  } // if\r\n\t} // if\r\n    \r\n    \r\n\t// The time domain can only be known AFTER the metadata is loaded. But, after the timesteps are updated the playcontrols need to be updated too. Specifically, the chapters need to be rebuild because they are independent of the actual annotations. But they currently don't need to be! Yes, they do - e.g. padding etc.\r\n\tobj.ui.t_domain = obj.geometry.domain.t;\r\n  } // update\r\n  \r\n  \r\n  incrementTimeStep(dt){\r\n\t/*\r\n\tThe small multiple should be able to play on its own. In that case it should just update the data 24 times per second.\r\n\t\r\n\tIt should of course support playing several small multiples at once. If the 'dt' for all the simulations are the same then playing several at once just requires an input that will toggle several small multiples on at the same time. If the 'dt' are not the same, then it becomes more difficult because the data can't be loaded by incrementing, and instead a desired time must be passed to the player. Furthermore, the player should support several small multiples to be played at once, but starting from different times. In those cases the player must keep track of the time increment total to ensure all small multiples move by the same amount.\r\n\t\r\n\tFor now the playbar can just play forward correctly, and the t_play can be used to keep track of the actual playing time. The dt is just added on to that time them.\r\n\t*/\r\n\tlet obj = this;\r\n\t\r\n\tif(dt >= 0){\r\n\t  let t_new = obj.ui.t_play + dt\r\n\t  obj.geometry.timestepCurrentFrame(t_new);\r\n\t  obj.ui.t_play = t_new;\r\n\t} else {\r\n\t  obj.geometry.incrementCurrentFrame();\r\n\t  obj.ui.t_play = obj.geometry.currentTime;\r\n\t} // if\r\n\t\r\n\tobj.geometry.updateCurrentFrameBuffer();\r\n  } // incrementTimeStep\r\n  \r\n} // UnsteadyPlayer2D","/* No need to implement anything else than panning and zooming for the 2D example. The model matrix and the rojection matrix are not needed. The view is needed to allow for zooming.\r\n\r\nupdateAttributesAndUniforms needs to be changed to accomodate different size elements.\r\n\r\nActually, Graham's own rendering was effectively using 3D coordinates. The 2D position 'a_position' was expanded with z=0 and w=1 before multiplying with matrices.\r\n\r\nStill, hte program needs to be assembled in a different way.\r\n\r\nprojection: orthographic - no distortion\r\nview: camera movement.\r\nmodel: unit matrix, model not moving.\r\n*/\r\n\r\nimport * as twgl from \"twgl.js\";\r\n// import ViewFrame2D from \"./ViewFrame2D.js\";\r\nimport UnsteadyPlayer2D from \"./UnsteadyPlayer2D.js\";\r\n\r\nlet vertshader = `\r\n//Each point has a position and color\r\nattribute vec2 position;\r\nattribute float value;\r\n\r\n// The transformation matrices\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 projection;\r\n\r\n// Pass the color attribute down to the fragment shader\r\nvarying float v_uint_colorval;\r\n\r\nvoid main() {\r\n  \r\n  // Pass the color down to the fragment shader.\r\n  v_uint_colorval = value;\r\n  \r\n  // Read the multiplication in reverse order, the point is taken from the original model space and moved into world space. It is then projected into clip space as a homogeneous point. Generally the W value will be something other than 1 at the end of it.\r\n  gl_Position = projection * view * model * vec4( position, 0.0, 1.0 );\r\n}`;\r\n\r\n\r\nlet fragshader = `\r\nprecision mediump float;\r\nvarying float v_uint_colorval;\r\n\r\nuniform sampler2D colormap;\r\nuniform float u_cmin, u_cmax;\r\nuniform float u_uint_cmin, u_uint_cmax;\r\n\r\nvoid main() {\r\n  gl_FragColor = texture2D(colormap, vec2( ( (v_uint_colorval/255.0*(u_uint_cmax-u_uint_cmin)+u_uint_cmin) - u_cmin)/(u_cmax-u_cmin), 0.5));;\r\n}`;\r\n\r\n\r\n\r\n// A viridis colormap. Values for color channels in frag shader should be [0, 1].\r\nlet cmap = new Uint8Array( [\r\n  68, 1, 84, 255,\r\n  71, 19, 101, 255,\r\n  72, 36, 117, 255,\r\n  70, 52, 128, 255,\r\n  65, 68, 135, 255,\r\n  59, 82, 139, 255,\r\n  53, 95, 141, 255,\r\n  47, 108, 142, 255,\r\n  42, 120, 142, 255,\r\n  37, 132, 142, 255,\r\n  33, 145, 140, 255,\r\n  30, 156, 137, 255,\r\n  34, 168, 132, 255,\r\n  47, 180, 124, 255,\r\n  68, 191, 112, 255,\r\n  94, 201, 98, 255,\r\n  122, 209, 81, 255,\r\n  155, 217, 60, 255,\r\n  189, 223, 38, 255,\r\n  223, 227, 24, 255,\r\n  253, 231, 37, 255\r\n] ); // cmap\r\n\r\n\r\n\r\nexport default class MeshRenderer2D{\r\n  constructor(canvas, container){\r\n\tlet obj = this;  \r\n\t\r\n\tobj.domcontainer = container;\r\n\t\t\r\n\tobj.canvas = canvas;\r\n\tobj.canvas.width = window.innerWidth;\r\n\tobj.canvas.height = window.innerHeight;\r\n\r\n\t// Grab a context and setup a program.\r\n\tlet gl = canvas.value = canvas.getContext(\"webgl\", {antialias: true, depth: false});\r\n\t\r\n\t// The extension is needed to allow indices to be uint32.\r\n\tlet uints_for_indices = gl.getExtension(\"OES_element_index_uint\");\r\n\t// console.log(\"can uints be used? \", uints_for_indices)\r\n\t\r\n\tobj.webglProgram = setupProgram(gl);\r\n\tobj.gl = gl;\r\n\t\r\n\t\r\n\t\r\n\t// The texture represents a solorbar, and stores the color values. It is indexed on a range of 0 - 1. The index is computed in the colorshader.\r\n\t// gl.texImage2D( ... , width, height, border, format, type, ArrayBuffer)\r\n\tobj.colormapTexture = gl.createTexture();\r\n\tgl.bindTexture(gl.TEXTURE_2D, obj.colormapTexture);\r\n\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 21, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, cmap);\r\n\t\r\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\r\n\t\r\n\t// Collection of plots to draw.\r\n\tobj.items = []\r\n\t\r\n  } // constructor\r\n  \r\n  \r\n  draw(){\r\n\tlet obj = this;\r\n\tlet gl = obj.gl;\r\n\t\r\n\t// Common current time. This should be changed so that it starts from when the user presses a play. Furthermore the views should be either linked or individual\r\n\tlet now = performance.now();\r\n\t\r\n\t// Move the canvas to the right position for scrolling.\r\n\tgl.canvas.style.transform = `translateY(${window.scrollY}px)`;\r\n\t\r\n\t\r\n\t// The actual drawing loop.\r\n\tobj.items.forEach(item=>{\r\n\t\t// Check whether the item is visible or not.\r\n\t\tif( obj.isItemVisible(item) ){\r\n\t\t  // Update the ViewFrame to calculate new transform matrices. Nothing (camera, model, zoom) moves as a function of time. Time is still passed in to synchronise the player updates.\r\n\t\t  item.update(now)\r\n\t\t\r\n\t\t  // Update the data going to the GPU\r\n\t\t  obj.updateAttributesAndUniforms(item);\r\n\t\t\r\n\t\t  // Set the rectangle to draw to. Scissor clips, viewport transforms the space. The viewport seems to be doing the scissoring also...\r\n\t\t  obj.updateViewport(item)\r\n\t\t\r\n\t\t  // Perform the actual draw. gl.UNSIGNED_INT allows teh use of Uint32Array indices, but the 'OES_element_index_uint' extension had to be loaded.\r\n\t\t  gl.drawElements(gl.TRIANGLES, item.geometry.indicesLength, gl.UNSIGNED_INT, 0);\r\n\t\t\r\n\t\t} // if\r\n\t}) // forEach\r\n\t\r\n\trequestAnimationFrame( obj.draw.bind(obj) );\r\n  } // draw\r\n  \r\n  add(meshMetadataFilename){\r\n\tlet obj = this;\r\n\t\r\n\t// let newplayer = new ViewFrame2D(obj.gl);\r\n\tlet newplayer = new UnsteadyPlayer2D(obj.gl, meshMetadataFilename);\r\n\tobj.domcontainer.appendChild(newplayer.node);\r\n\tobj.items.push(newplayer);\r\n\t\r\n\t// Return the newplayer if metadata has to be added to it.\r\n\treturn newplayer\r\n  } // add\r\n  \r\n  updateViewport(item){\r\n\tlet gl = this.gl;\r\n\t \r\n\tgl.viewport(...item.viewport);\r\n\tgl.scissor(...item.viewport);\r\n\tgl.clearColor(...[0,0,0,0]);  \r\n  } // updateViewport\r\n  \r\n  \r\n  // Maybe the update could be performed by the item itself. That way both 2D and 3D objects could potentially be drawn alongside. \r\n  // But the programme declares the variables it expects, so the program would have to be redone also, which means another webgl instance is needed, and thus another canvas.\r\n  \r\n  \r\n  updateAttributesAndUniforms(item){\r\n\t// 'item' is a 'ViewFrame' instance. This method needs to update the transformation matrices, which are owned by the 'ViewFrame' instance, as well as the geometry buffers owned by the 'ViewFrame.geometry' instance.\r\n\t// 'transforms' should have the 'model', 'projection', and 'view' transform 4x4 matrices that will be used to draw the scene.\r\n\t// In addition to that this update also requires the 'position' and 'color' buffers. So the entire geometry is needed here to update gl before drawing. \r\n\tlet obj = this;\r\n\tlet gl = this.gl;\r\n\t\r\n\t// Locations are pointers to the GPU buffers. Transforms are the transformation matrices. Buffers are the geometry arrays.\r\n\tlet locations = obj.webglProgram.locations;\r\n\tlet transforms = item.transforms;\r\n\t\r\n\t\r\n\t// Update the transformations.\r\n\tgl.uniformMatrix4fv( locations.model, false, new Float32Array(transforms.model));\r\n\tgl.uniformMatrix4fv( locations.projection, false, new Float32Array(transforms.projection));\r\n\tgl.uniformMatrix4fv(locations.view, false, new Float32Array(transforms.view));\r\n\r\n\t// Set the vertices attribute\r\n\tgl.enableVertexAttribArray( locations.position );\r\n\tgl.bindBuffer(gl.ARRAY_BUFFER, item.geometry.verticesBuffer );\r\n\tgl.vertexAttribPointer( locations.position, 2, gl.FLOAT, false, 0, 0 );\r\n\r\n\t// Update the colors attribute\r\n\tgl.enableVertexAttribArray( locations.value );\r\n\tgl.bindBuffer(gl.ARRAY_BUFFER, item.geometry.valuesBuffer);\r\n\tgl.vertexAttribPointer( locations.value, 1, gl.FLOAT, false, 0, 0);\r\n\r\n\t// Update the indices attribute.\r\n\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, item.geometry.indicesBuffer );\r\n\r\n\r\n\r\n\r\n\r\n\t/* \r\n\tvec2( (v_colorval-u_cmin)/(u_cmax-u_cmin), 0.5)\r\n\r\n\tv_colorval : [0, 255]\r\n\tu_cmin : variable min value\r\n\tu_cmax : variable max value\r\n\r\n\tFirst I need to map from [0, 255] to [a,b], then to [0,1]. The first [0,255] represents the frame specific uint encoding. The second encoding allows all the values to be drawn to the correct value across several files. However, the [0, 255] values are pushed to the GPU straight away, and both mappings must occur there.\r\n\t*/\r\n\r\n\t// cmin/cmax give the global (for all small multiples) colorbar range.\r\n\tgl.uniform1f(locations.cmin, obj.globalColormapRange[0] ) // 0   880\r\n\tgl.uniform1f(locations.cmax, obj.globalColormapRange[1] ) // 255   920\r\n\t\r\n\t// uint_cmin/uint_cmax give the local (particular small multiple) colorbar range,\r\n\tgl.uniform1f(locations.uint_cmin, item.geometry.currentUintRange[0] ) // 0   880\r\n\tgl.uniform1f(locations.uint_cmax, item.geometry.currentUintRange[1] ) // 255   920\r\n\t\r\n\t\r\n\tgl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, obj.colormapTexture);\r\n    gl.uniform1i(locations.colormap, 0);\r\n\r\n\r\n  } // updateAttributesAndUniforms\r\n  \r\n \r\n  isItemVisible(item){\r\n\t// Check whether the current item is visible. (!!!!) Extend later to check whether other items obscure the current item.\r\n\tlet obj = this;\r\n\t\t\r\n\t// The idea is to collect all the boundingClientRects, and check if any of the following items overlap it, in which case skip the drawing.\r\n\t// The limit is 16 items drawn at once. There can be more items in analysis at the same time, but only 16 drawn at once. This means that if the items overlap, there can be any number of them, as long as they are in maximum 15 piles.\r\n\t// It all really depends on the connection speed and the size of the files...\r\n\tlet rect = item.node.getBoundingClientRect();\r\n\tlet isCovered = false;\r\n\tfor(let i=obj.items.indexOf(item)+1; i<obj.items.length; i++){\r\n\t\t// Check if the i-th viewFrame covers this one. This is a simple version that skirts the problem of figuring out if a bunch of viewFrames collectively cover this viewFrame.\r\n\t\t// Maybe later on there can just be group interfaces added as a separate attribute, and those can be made to hide the other frames,\r\n\t\tlet higherRect = obj.items[i].node.getBoundingClientRect();\r\n\t\tisCovered = isCovered ? true : isRectInHigherRect(rect, higherRect);\r\n\t} // for\r\n\t\r\n\treturn item.isOnScreen && !isCovered\r\n  } // isItemVisible\r\n  \r\n  get globalColormapRange(){\r\n\tlet obj = this;\r\n\t\r\n\treturn obj.items.reduce((acc,item)=>{\r\n\t\t// v is the domain across all the frames of an unsteady simulation instance.\r\n\t\tlet v = item.geometry.domain.v;\r\n\t\tacc[0] = acc[0] > v[0] ? v[0] : acc[0];\r\n\t\tacc[1] = acc[1] < v[1] ? v[1] : acc[1];\r\n\t\treturn acc\r\n\t}, [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY])\r\n\t\r\n\t\r\n  } // globalColormapRange\r\n\r\n} // MeshRenderer2D\r\n\r\n\r\nfunction isRectInHigherRect(rect, higherRect){\r\n\t// For it to be in hte rect it must be in the x and y range of the rect.\r\n\treturn ( (higherRect.left <= rect.left) && (rect.right <= higherRect.right) ) &&\r\n\t       ( (higherRect.top <= rect.top)   && (rect.bottom <= higherRect.bottom) )\r\n} // isPointInRect\r\n\r\n\r\nfunction setupProgram(gl){\r\n \r\n\t// WHAT EXACTLY DOES TWGL DO THAT I CAN'T DO MYSELF?\r\n \r\n\t// Setup a WebGL program\r\n\tlet webglProgram = twgl.createProgramInfo(gl, [vertshader, fragshader]);\r\n\tlet program = webglProgram.program;\r\n\tgl.useProgram(program);\r\n\t\r\n\t// Save the attribute and uniform locations\r\n    let loc_model = gl.getUniformLocation(program, \"model\");\r\n    let loc_view = gl.getUniformLocation(program, \"view\");\r\n    let loc_projection = gl.getUniformLocation(program, \"projection\");\r\n\t\r\n\tlet loc_colormap = gl.getUniformLocation(program, \"colormap\");\r\n\tlet loc_cmax = gl.getUniformLocation(program, \"u_cmax\");\r\n\tlet loc_cmin = gl.getUniformLocation(program, \"u_cmin\");\r\n\tlet loc_uint_cmax = gl.getUniformLocation(program, \"u_uint_cmax\");\r\n\tlet loc_uint_cmin = gl.getUniformLocation(program, \"u_uint_cmin\");\r\n\t\r\n    let loc_position = gl.getAttribLocation(program, \"position\");\r\n\tlet loc_value = gl.getAttribLocation(program, \"value\");\r\n    // let loc_color = gl.getAttribLocation(program, \"color\");\r\n\r\n\r\n\t// For 2D triangle meshes culling and depth testing is not needed.\r\n\t// gl.enable(gl.CULL_FACE);\r\n    // gl.enable(gl.DEPTH_TEST);\r\n\t\r\n\t// Scissor defines the part of canvas to draw to.\r\n\tgl.enable(gl.SCISSOR_TEST);\r\n\r\n\r\n\treturn {\r\n\t\tlocations: {\r\n\t\t\tmodel: loc_model,\r\n\t\t\tview: loc_view,\r\n\t\t\tprojection: loc_projection,\r\n\t\t\tcolormap: loc_colormap,\r\n\t\t\tcmax: loc_cmax,\r\n\t\t\tcmin: loc_cmin,\r\n\t\t\tuint_cmax: loc_uint_cmax,\r\n\t\t\tuint_cmin: loc_uint_cmin,\r\n\t\t\tposition: loc_position,\r\n\t\t\tvalue: loc_value\r\n\t\t},\r\n\t\tprogram: program\r\n\t};\r\n} // setupProgram\r\n\r\n","// Padding can be clicked on, margin cannot. The click event is limited to the padding of the view object. A check is done on mousedown to make sure that interactions with the data don't trigger the div to move. When moving the item needs to be placed at the end of the rendering que, as well as the html order to ensure that it stays on top - so that other items don't draw over it, and that the dragging continues even when mousing over a div that was made after it.\r\n\r\n// The dragging is done outside because I wish the rest of the interactivity - spatial arrangement, grouping to be added on top of this. That should make those aspects more general.\r\n\r\n// The initial positions must be collected all at the same time, as otherwise the rest of the \"position: relative;\" divs will get repositioned to where the previous div was.\r\n\r\nexport function addDraggingToSiblingItems(items, headeroffset){\r\n\t// To add the dragging an additional \"dragging\" attribute is introduced to the items. The items are ViewFrame objects that all have their nodes inside the same parent node. The parent node must be the same as the initial positions of the frames are calculated based on their current positions within hte parent div.\r\n\r\n\tlet positions = items.reduce((acc,item)=>{\r\n\t\tacc.push([item.node.offsetLeft, item.node.offsetTop + headeroffset])\r\n\t\treturn acc\r\n\t},[])\r\n\r\n\titems.forEach((item,i)=>{\r\n\t\t\t\r\n\t\titem.node.style.position = \"absolute\";\r\n\t\titem.node.style.left = positions[i][0] + \"px\"\r\n\t\titem.node.style.top = positions[i][1] + \"px\"\r\n\t\t\r\n\t\t\r\n\t\tlet onstart = function(){\r\n\t\t\t// Move this item to the end of the drawing queue to ensure it's drawn on top.\r\n\t\t\titems.splice(items.indexOf(item), 1);\r\n\t\t\titems.push(item)\r\n\t\t} // function\r\n\t\taddDraggingToItem(item, onstart)\r\n\t\t\r\n\t\t/*\r\n\t\t// Add an object to facilitate the dragging.\r\n\t\titem.dragging = {\r\n\t\t\tactive: false,\r\n\t\t\titemRelativePosition: [0, 0]\r\n\t\t} // dragging\r\n\r\n\t\titem.node.onmousedown = function(e){\r\n\t\t\tif(e.target == item.node){\r\n\t\t\t\tlet rect = item.node.getBoundingClientRect();\r\n\t\t\t\t\r\n\t\t\t\titem.dragging.active = true;\r\n\t\t\t\titem.dragging.itemRelativePosition = [\r\n\t\t\t\t\te.clientX - rect.x,\r\n\t\t\t\t\te.clientY - rect.y\r\n\t\t\t\t];\r\n\t\t\t\t\r\n\t\t\t\t// Move this item to the end of the drawing queue to ensure it's drawn on top.\r\n\t\t\t\titems.splice(items.indexOf(item), 1);\r\n\t\t\t\titems.push(item)\r\n\t\t\t\t\r\n\t\t\t\t// Also move the viewFrame div up so that dragging over otehr higher divs is uninterrupted.\r\n\t\t\t\titem.node.parentNode.insertBefore(item.node, null);\r\n\t\t\t} // if\r\n\t\t} // onmousedown\r\n\t\titem.node.onmousemove = function(e){\r\n\t\t\tif(item.dragging.active){\r\n\t\t\t\tlet x = e.pageX - item.dragging.itemRelativePosition[0];\r\n\t\t\t\tlet y = e.pageY - item.dragging.itemRelativePosition[1];\r\n\t\t\t\t\r\n\t\t\t\titem.node.style.left = x + \"px\"\r\n\t\t\t\titem.node.style.top  = y + \"px\"\r\n\t\t\t} // if\r\n\t\t} // mousemove\r\n\t\titem.node.onmouseup   = function(){\r\n\t\t\titem.dragging.active = false;\r\n\t\t} // onmouseup\r\n\t\t*/\r\n\t}) // forEach\r\n\t\r\n} // addDraggingToSiblingItems\r\n\r\n\r\n// How to make the addition of dragging more general?? There are some things that have to happen. Pass them in as additional functions?\r\nexport function addDraggingToItem(item, onstart){\r\n\t// Add an object to facilitate the dragging.\r\n\titem.dragging = {\r\n\t\tactive: false,\r\n\t\titemRelativePosition: [0, 0]\r\n\t} // dragging\r\n\r\n\titem.node.onmousedown = function(e){\r\n\t\tif(e.target == item.node){\r\n\t\t\tlet rect = item.node.getBoundingClientRect();\r\n\t\t\t\r\n\t\t\titem.dragging.active = true;\r\n\t\t\titem.dragging.itemRelativePosition = [\r\n\t\t\t\te.clientX - rect.x,\r\n\t\t\t\te.clientY - rect.y\r\n\t\t\t];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Also move the viewFrame div up so that dragging over otehr higher divs is uninterrupted.\r\n\t\t\titem.node.parentNode.insertBefore(item.node, null);\r\n\t\t\t\r\n\t\t\tif(onstart){onstart()} // if\r\n\t\t} // if\r\n\t} // onmousedown\r\n\titem.node.onmousemove = function(e){\r\n\t\tif(item.dragging.active){\r\n\t\t\tlet x = e.pageX - item.dragging.itemRelativePosition[0];\r\n\t\t\tlet y = e.pageY - item.dragging.itemRelativePosition[1];\r\n\t\t\t\r\n\t\t\titem.node.style.left = x + \"px\"\r\n\t\t\titem.node.style.top  = y + \"px\"\r\n\t\t} // if\r\n\t} // mousemove\r\n\titem.node.onmouseup   = function(){\r\n\t\titem.dragging.active = false;\r\n\t} // onmouseup\r\n} // addDraggingToItem\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export function html2element(html){\r\n\tlet template = document.createElement('template'); \r\n\ttemplate.innerHTML = html.trim(); // Never return a text node of whitespace as the result\r\n\treturn template.content.firstChild;\r\n} // html2element\r\n\r\nexport function svg2element(svg){\r\n  let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n  g.innerHTML = svg.trim();\r\n  return g.firstChild;\r\n} // svg2element\r\n\r\n// From regular helpers.\r\nexport function arrayEqual(A, B){\r\n\t\r\n\treturn arrayIncludesAll(A, B)\r\n\t\t&& arrayIncludesAll(B, A)\r\n\t\r\n} // arrayEqual\r\n\r\nexport function arrayIncludesAll(A,B){\r\n\t// 'arrayIncludesAll' checks if array A includes all elements of array B. The elements of the arrays are expected to be strings.\r\n\t\r\n\t// Return element of B if it is not contained in A. If the response array has length 0 then A includes all elements of B, and 'true' is returned.\r\n\tvar f = B.filter(function(b){\r\n\t\treturn !A.includes(b)\r\n\t})\r\n\t\r\n\treturn f.length == 0? true : false\r\n} // arrayIncludesAll\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// d3 replacement.\r\nexport function joinDataToElements(data, elements, idAccessor){\r\n  \r\n  // Find data that has no elements, find the elements that have data, and the leftover.\r\n  let elementsArray = [...elements];\r\n  let elementsDataIds = elementsArray.map(el=>idAccessor(el.__data__));\r\n  \r\n  \r\n  let g = elementsArray.reduce((acc,el)=>{\r\n\tlet d = data.filter(d_=>{\r\n\t\treturn idAccessor(el.__data__) == idAccessor(d_)\r\n\t}) // filter\r\n\tif( d.length > 0 ){\r\n\t  el.__data__ = d[0]\r\n\t  acc.update.push(el)\r\n\t} else {\r\n\t  acc.exit.push(el)\r\n\t} // if\r\n\treturn acc\r\n  }, {update: [], exit: []}) // filter\r\n  \r\n  g.enter = data.filter(d=>{\r\n\treturn !elementsDataIds.includes(idAccessor(d))\r\n  }) // filter\r\n  \r\n  return g\r\n} // joinDataToElements\r\n\r\n\r\n\r\n\r\n\r\nexport class scaleCategorical {\r\n  domain = []\r\n  range = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']\r\n\r\n  // Opposite function is not defined - two domain values can map to the same range value.\r\n  dom2range(v){\r\n\tlet obj = this;\r\n\tlet i = (obj.domain.indexOf(v)+1) % obj.range.length - 1;\r\n\tif(i<0){\r\n\t\tobj.domain.push(v);\r\n\t\treturn obj.range[obj.domain.length-1];\r\n\t} else {\r\n\t\treturn obj.range[i];\r\n\t} // if\r\n  } // dom2range\r\n  \r\n} // scaleCategorical\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// Link has access to the nodes, but it will have it's own offsets. This allows the drawnode to change its values correctly.\r\nexport default class DrawLink{\r\n\t// Indices when exiting parent node, entering child node, and the index of position of the bend.\r\n\tpi = 0\r\n\tci = 0\r\n\tbendi = 0\r\n\t\r\n\t// Actual dimensions. The label width is the minimum horizontal line length. Bundle width is the space reserved for the vertical line width. Line width is the actual width of the white outline. The default radius is the basis for the actual bend radii.\r\n\tnode_label_width = 70\r\n\tbundle_width = 4\r\n\tline_width = 4\r\n\tr = 16\r\n\t\r\n\tconstructor(parentnode, childnode, author){\r\n\t\tlet obj = this;\r\n\t\t\r\n\t\t// So that hte locations can be changed on hte go.\r\n\t\tobj.parentnode = parentnode;\r\n\t\tobj.childnode = childnode;\r\n\t\tobj.author = author;\r\n\t\t\r\n\t\t// Exit radius is determined node level difference.\r\n\t\tobj.r1 = (childnode.level - parentnode.level)*obj.r;\r\n\t\tobj.r2 = obj.r;\r\n\t} // constructor\r\n\t\r\n\tget path(){\r\n\t\t// Doesn't take into account the offsets yet!!\r\n\t\t\r\n\t\t\r\n\t\t// Allow this to return a straight path, or a curved one. The straight path is exclusively for bundles that have only one parent. Furthermore, that one should only be allowed when connecting nodes on the same height. So maybe just base the decision off of that?\r\n\t\t\r\n\t\t// Straight path is just M0 0 L40 0 or so.\r\n\t\t\r\n\t\tlet obj = this;\r\n\t\t\t\t\r\n\t\t\r\n\t\tlet dyc = obj.ci*obj.line_width + obj.childnode.markerEmptyIn;\r\n\t\tlet dyp = obj.pi*obj.line_width + obj.parentnode.markerEmptyOut;\r\n\t\t\r\n\t\t// The target x should be > `xHorizontal + r1 + r2'\r\n\t\tlet xHorizontal = obj.parentnode.x + obj.node_label_width + obj.bendi*obj.bundle_width;\r\n\t\t\r\n\t\t\r\n\t\t// Origin and target MUST be at least `[node_label_width + 2*r, 2*r]' apart otherwise the graphic logic doesn't follow.\r\n\t\tlet origin = {\r\n\t\t\tx: obj.parentnode.x,\r\n\t\t\ty: obj.parentnode.yMarkerStart + dyp\r\n\t\t}\r\n\t\t\r\n\t\tlet target = {\r\n\t\t\tx: obj.childnode.x,\r\n\t\t\ty: obj.childnode.yMarkerStart + dyc\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tlet arc1start = {\r\n\t\t\tx: xHorizontal - obj.r1,\r\n\t\t\ty: origin.y\r\n\t\t}\r\n\t\t\r\n\t\tlet arc1end = {\r\n\t\t\tx: xHorizontal,\r\n\t\t\ty: origin.y + obj.r1\r\n\t\t}\r\n\r\n\t\tlet arc2start = {\r\n\t\t\tx: xHorizontal,\r\n\t\t\ty: target.y - obj.r2\r\n\t\t}\r\n\t\t\r\n\t\tlet arc2end = {\r\n\t\t\tx: xHorizontal + obj.r2,\r\n\t\t\ty: target.y\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t/*\r\n\t\tHow the path is made up.\r\n\t\tstart point                   : M0 0\r\n\t\thorizontal line               : L40 0\r\n\t\tfirst bend to vertical        : A16 16 90 0 1 46 16\r\n\t\tvertical line                 : L46 34\r\n\t\tsecond bend to horizontal     : A16 16 90 0 0 62 50\r\n\t\thorizontal connection to node : L62 50\r\n\t\t*/\r\n\t\tlet p = `M${ origin.x } ${ origin.y } L${ arc1start.x } ${ arc1start.y } A${ obj.r1 } ${ obj.r1 } 90 0 1 ${ arc1end.x } ${ arc1end.y } L${ arc2start.x } ${ arc2start.y } A${ obj.r2 } ${ obj.r2 } 90 0 0 ${ arc2end.x } ${ arc2end.y } L${ target.x } ${ target.y }`; \r\n\t\treturn p\r\n\t} // path\r\n\t\r\n} // DrawLink","import { svg2element } from \"./helpers.js\";\r\nimport DrawLink from \"./DrawLink.js\";\r\n\r\n// Lines are drawn in bundles. The links are drawn as two pats, one in color, and the other white. The white paths are in the background and help make the transitions over lines neater. If links were drawn individually then the bundle itself would have an overlap somewhere.\t\r\nlet template = `\r\n<g class=\"bundle\">\r\n  <path stroke=\"white\" stroke-width=\"5\" fill=\"none\"></path>\r\n  <path stroke=\"black\" stroke-width=\"2\" fill=\"none\"></path>\r\n</g>\r\n`; // tempalte\r\n\r\n\r\n// These should just be exposed at the link level... The tree level also has them, and it's non hygienic.\r\nlet node_label_width = 70\r\nlet bundle_width = 4\r\nlet line_width = 4\r\nlet r = 16\r\n\r\n// Bundles are the connections between two levels of nodes.\r\nexport default class treebundle{\r\n\t// Index is the ranked position of this bundle within hte level. It determines the position of hte vertical line segment, and the corner radius.\r\n\tlinks = []\r\n\t_bendi = 0;\r\n\t\r\n\tconstructor(seednode, author){\r\n\t\t// A seed node is passed in to define the bundle parents and thus instantiate a bundle. After instantialisation only the children of the bundle can change.\r\n\t\t// NOTE: seednode is a `treenode' instance, but parents and children are `taskgroup' instances. The level is only defined for the node because it can change when the user interacts with the tree.\r\n\t\tlet obj = this;\r\n\t\tobj.node = svg2element( template );\r\n\t\t\r\n\t\tobj.author = author,\r\n\t\tobj.level = seednode.level;\r\n\t\tobj.parents = seednode.connections.parents;\r\n\t    obj.children = [seednode.connections.group];\r\n\t\t\r\n\t\tobj.nodeChildren = [seednode];\r\n\t\tobj.nodeParents = [];\r\n\t\t\r\n\t} // constructor\r\n\t\r\n\tset bendi(i){\r\n\t\t// When a bunldes bend index is set it should propagate it to all the children.\r\n\t\tlet obj = this;\r\n\t\tobj.links.forEach(link=>{\r\n\t\t\tlink.bendi = i;\r\n\t\t}) // forEach\r\n\t\tobj._bendi = i;\r\n\t} // bendi\r\n\t\r\n\tget bendi(){return this._bendi} // get bendi\r\n\t\r\n\tupdate(color){\r\n\t\tlet obj = this;\r\n\t\t\r\n\t\tlet paths = obj.node.querySelectorAll(\"path\");\r\n\t\tfor(let i=0; i<paths.length; i++){\r\n\t\t\tpaths[i].setAttribute(\"d\", obj.path)\r\n\t\t} // for\r\n\t\t\r\n\t\tif(color){\r\n\t\t\tpaths[paths.length-1].setAttribute(\"stroke\", color);\r\n\t\t} // if\r\n\t} // update\r\n\t\r\n\t\r\n\taddparent(node){\r\n\t\t// Only nodes can be pushed. And only the ones declared upon initialisation!\r\n\t\tlet obj = this;\r\n\t\t\r\n\t\tlet isNodeAllowed = obj.parents.includes(node.connections.group);\r\n\t\tlet isNodeUnknown = !obj.nodeParents.includes(node);\r\n\t\t\r\n\t\tif( isNodeAllowed && isNodeUnknown ){\r\n\t\t\tobj.nodeParents.push(node);\r\n\t\t\tobj.updateNodeMinPositions();\r\n\t\t} // if\r\n\t} // addparent\r\n\t\r\n\taddchild(node){\r\n\t\tlet obj = this;\r\n\t\tif(!obj.children.includes(node.connections.group)){\r\n\t\t\tobj.children.push(node.connections.group);\r\n\t\t} // if\r\n\t\t\r\n\t\tif(!obj.nodeChildren.includes(node)){\r\n\t\t\tobj.nodeChildren.push(node);\r\n\t\t\tobj.updateNodeMinPositions();\r\n\t\t} // if\r\n\t} // addchild\r\n\t\r\n\tmakelinks(){\r\n\t\tlet obj = this;\r\n\t\t\t\t\t\r\n\t\t// Links must be made for every child-parent combination. Strictly speaking at least one link must be made for all the children, and at least one link must connect to every parent.\r\n\t\tlet links = []\r\n\t\t\r\n\t\tobj.nodeParents.forEach(p=>{\r\n\t\t\tobj.nodeChildren.forEach(c=>{\r\n\t\t\t\tlinks.push( new DrawLink(p,c) )\r\n\t\t\t}) // forEach\r\n\t\t}) // forEach\r\n\t\t\r\n\t\tobj.links = links;\r\n\t\t\r\n\t} // links\r\n\t\r\n\t\r\n\t// Make the full path here??\r\n\tget path(){\r\n\t\tlet obj = this;\r\n\t\treturn obj.links.map(link=>link.path).join(\"\")\r\n\t} // path\r\n\t\r\n\t\r\n\tget width(){\r\n\t\t// The width of the bundle is the fixed horizontal distance plus the number of bundles multiplied by the width reserved for the vertical line segment. The nodes, and therefore the lines are not yet positioned properly, therefore their width cannot be used to calculate the bunlde width. But they can be just summed together though!\r\n\t\t// Note that this is the minimum width of spanning one level, and not the entire width of the bundle, which may include lines spanning multiple levels!\r\n\t\t\r\n\t\treturn node_label_width + obj.bundles.length*bundle_width + r;\r\n\t} // get width\r\n\t\r\n\tupdateNodeMinPositions(){\r\n\t\t// This should just be run whenever teh parents or the children are changed.\r\n\t\t// Because the links make two 90 degree turns when connecting the parent to the child the radii of these turns constitute the minimum y offset of this bundle relative to the previous one. Furthermore, this is offset relative to the lowest parent! This is important when positioning the child nodes.\r\n\t\tlet obj = this;\r\n\t\t\r\n\t\tlet y_lowest_parent = obj.nodeParents.reduce((acc, p)=>{\r\n\t\t\treturn acc > p.y ? acc : p.y\r\n\t\t}, 0)\r\n\t\t\r\n\t\tobj.nodeChildren.forEach(child=>{\r\n\t\t\tchild.miny = y_lowest_parent + 2*r;\r\n\t\t}) // forEach\r\n\t\t\r\n\t} // y_min\r\n\t\r\n} // treebundle","let node_label_width = 70; // length of text\r\nlet bundle_width = 4; // reserved space for the vertical bunlde line\r\nlet r = 16; // arc radius\r\n\r\n// A level is an organisational group. All dimensioning is done through a treelevel. The primary elements that define the level are its bundles. The TreeLevel is necessary because the bundles need to be sequenced within a level, and the level width is required to position hte levels. Because the bundles are based on a set of parents, the level of the bundle is the level of the children.\r\nexport default class TreeLevel{\r\n  constructor(nodes, bundles, nlevel){\r\n\t\tlet obj = this;\r\n\t\tobj.n = nlevel;\r\n\t\tobj.bundles = bundles.filter(b=>b.level==nlevel);\r\n\t\tobj.nodes = nodes.filter(n=>n.level==nlevel);\r\n\t} // constructor\r\n\t\r\n\tget width(){\r\n\t\t// The width of the entire level. It's the width of the label plus the width of all the vertical line segments (including padding), plus the length of the finishing horizontal segment (this is zero for the right-most bundle).\r\n\t\tlet obj = this;\r\n\t\t\r\n\t\t// The width of the level is determined by the bundles that end in it. If there aren't any bundles, there is no width. Maybe do a reduce and move the width calculation to the bundle? That would eliminate the dimensions here.\r\n\t\tif(obj.bundles.length > 0){\r\n\t\t\treturn node_label_width + obj.bundles.length*bundle_width + r;\r\n\t\t} else {\r\n\t\t\treturn 0\r\n\t\t} // if\r\n\t} // width\r\n} // TreeLevel","import { arrayEqual } from \"./helpers.js\";\r\n\r\nimport TreeBundle from \"./TreeBundle.js\";\r\nimport TreeLevel from \"./TreeLevel.js\";\r\n/* \r\nA defined group hierarchy (groups, group members, and group parents have been established) is passed in. The input data is an array of groups to be drawn.\r\n\r\nThis is the background data based on which a tree chart can be established. Interactions with the tree don't change the underlying group hierarchy, only the drawn representation.\r\n*/\r\n\r\n/*\r\nNode height -> number of bundles connecting to it\r\nNode x -> depends on the levels and their widths\r\nNode y -> position of parent nodes\r\nLevel width -> number of bundles\r\nBundle links -> parent/child nodes\r\n*/\r\n\r\nfunction getBundleLinesGoingThroughNode(bundle, node){\r\n\t// Given some bundles find which of its lines go through a specific node. Whether the lines are incoming or outgoing is not needed, because it's determined by the relationship between the bundles and the node. Instead the node must just be referenced by the line.\r\n\treturn bundle.links.filter(link=>{\r\n\t\treturn link.childnode == node || link.parentnode == node;\r\n\t}) // filter\r\n} // getBundleLines\r\n\t\r\nfunction arrangeIncomingOutgoingTracks(node, bundles){\r\n\t// To draw the node I need to know where to start, how big it should be, and I should also know what the label is, and what the corresponding tags are.\r\n\t\r\n\t// Each bundle should be staggered when entering a particular node. But bundles can also hold lines of several authors. These should be staggered as well.\r\n\t\t\r\n\tlet outgoingbundles = bundles.filter(b=>{\r\n\t\treturn b.parents.includes( node.connections.group );\r\n\t}) // filter\r\n\t\r\n\tlet incomingbundles = bundles.filter(b=>{\r\n\t\treturn b.children.includes( node.connections.group );\r\n\t}) // filter\r\n\t\r\n\t\r\n\t// Bundles spanning multiple levels should be all the way at the top. Then they should be ordered by bundle ind. Larger bendi means bend happens more to the right.\r\n\tincomingbundles.sort((a,b)=>{\r\n\t\treturn b.level - a.level || b.bendi - a.bendi;\r\n\t}) // sort\r\n\t\r\n\toutgoingbundles.sort((a,b)=>{\r\n\t\treturn b.level - a.level || b.bendi - a.bendi;\r\n\t}) // sort\r\n\t\r\n\t// This should be improved. First of all, the track indices and the bundle indices should be coordinated by sorting the lines by bundle ind before assigning the track ind. Secondly, it would be good if bundles of the same color could maintain same track positions...\r\n\t\r\n\t\r\n\t// Assign the index of track to enter the node by.\r\n\tincomingbundles.forEach((bundle,i)=>{\r\n\t\tlet lines = getBundleLinesGoingThroughNode(bundle, node);\r\n\t\tlines.forEach(line=>{\r\n\t\t\tline.ci = i;\r\n\t\t})\r\n\t}) // forEach\r\n\t\r\n\toutgoingbundles.forEach((bundle,i)=>{\r\n\t\tlet lines = getBundleLinesGoingThroughNode(bundle, node);\r\n\t\tlines.forEach(line=>{\r\n\t\t\tline.pi = i;\r\n\t\t})\r\n\t}) // forEach\r\n\t\r\n\t\r\n\t// Set number of incoming bundles.\r\n\tnode.nbundlesin  = incomingbundles.length;\r\n\tnode.nbundlesout = outgoingbundles.length;\r\n\t\r\n\t\t\r\n} // arrangeIncomingOutgoingTracks\r\n\r\nfunction arrangeBundlesOfLevel(bundles){\r\n\t\r\n\tbundles.sort((a,b)=>{\r\n\t\t// How to sort by similarity? Similarity is based on a pairs, not on individual. Maybe order by size, and then progressively do smaller sorts? Or just sort the nodes, and adjust the bundles to that?\r\n\t\t\r\n\t\t// Sort by size.\r\n\t\treturn b.children.length - a.children.length;\r\n\t}) // sort\r\n\t\r\n\t\r\n\t\r\n\t// But it also depends on hte nodes in hte previous level? So just arrange them sensibly? Go through them and assign minimum y positions based on the parents. This can later be used to create further bundles?\r\n\t\r\n\t\r\n\t// Maybe the nodes should just track the indices of the paths that lead to them? Sort of a history? That would also allow the longest chain to be identified. And then the level indices of the paths/bundles can be used to determine the order.\r\n\t\r\n\t\r\n\t// Maybe if the up-path is also allowed it can be used to reclaim some space after a particular branch ends?\r\n\t\r\n\t// The bundle needs an ind for within the level. This can be used to sort the bundle links horizontally. The location of the vertical line segment is determined based on this index.\r\n\tlet maxBundleInd = bundles.length - 1;\r\n\tbundles.forEach((b,i)=>{\r\n\t\tb.bendi = maxBundleInd - i;\r\n\t}) // forEach\r\n\t\r\n\t\r\n} // arrangeBundlesOfLevel\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction getbundles(nodes){\r\n\t\t\r\n\t// The bundles should be differentiated based on tag authors.\r\n\tlet bundleseeds = nodes.filter(node=>{\r\n\t\treturn node.connections.parents.length > 0;\r\n\t}) // filter\r\n\t\r\n\t\r\n\t// The `taskgroup' objects have several tags connected to them. Each tag represents a group that was created by some user. For every author of a group there should be a different bundle connecting to it. Even if the tag has only been created for that specific group.\r\n\t\r\n\t\r\n\t// Two bundles are not necessarily the same if htey have the same parents. They should be differentiated by the user tag also.\r\n\t\r\n\tlet bundles = bundleseeds.reduce(function(bundles, node){\r\n\t\t\r\n\t\t// This node may belong to several bundles made by different authors. Find thos bundles, and if they can't be found create them.\r\n\t\tnode.connections.group.tags.forEach(tag=>{\r\n\t\t\tlet existing = bundles\r\n\t\t\t  .filter(b=>b.author==tag.author)\r\n\t\t\t  .filter(b=>arrayEqual(b.parents, node.connections.parents))\r\n\t\t\t  \r\n\t\t\tif(existing.length>0){\r\n\t\t\t\texisting.forEach(b=>{\r\n\t\t\t\t\tb.addchild(node)\r\n\t\t\t\t}) // forEach\r\n\t\t\t} else {\r\n\t\t\t\tbundles.push( new TreeBundle(node, tag.author) )\r\n\t\t\t} // if\r\n\t\t})\r\n\t\t\r\n\t\treturn bundles\r\n\t}, []) // map\r\n\t\r\n\t\r\n\t\r\n\t// Go through hte nodes one more time to assign the parent nodes also. Originally only the groups are assigned as parents as the incoming nodes don't reference other nodes, but the groups do reference each other.\r\n\t// `treebundle' instances will check whether parents are valid.\r\n\tnodes.forEach(node=>{\r\n\t\tbundles.forEach(bundle=>{\r\n\t\t\tbundle.addparent(node);\r\n\t\t})\r\n\t}) // forEach\r\n\t\r\n\t\r\n\t// Make sure the bundles create all the required links.\r\n\tbundles.forEach(bundle=>{\r\n\t\tbundle.makelinks();\r\n\t})\r\n\t\r\n\t\t\r\n\treturn bundles;\r\n} // get bundles\r\n\r\nfunction getlevels(nodes, bundles){\r\n\t\t\r\n\t// Always create all new levels!!\r\n\tlet levels = []\r\n\t\r\n\t// Find all the levels from the bundles.\r\n\tlet maxlevel = Math.max( ...nodes.map(n=>n.level) )\r\n\tfor(let level=0; level<maxlevel+1; level++){\r\n\t\tlevels.push( new TreeLevel(nodes, bundles, level) )\r\n\t} // for\r\n  \r\n\treturn levels\r\n} // get levels\r\n\r\n\r\n\r\n// Maybe devolve this one into TreeRender and hierarchy?\r\n\r\n// The user can only click on the nodes to directly interact with the tree. Currently the 'collapsenode' is used for that.\r\nexport function dimensioning(nodes){\r\n\t// `dimension' calculates the positions of the nodes on the screen, and dimensions the connecting links.\r\n\tnodes.forEach(node=>node.clear())\r\n  \r\n\t// Need to get teh levels so that I have a constant copy... mobx would probably improve this, but it'll do for now. Maybe it'd just be better to collect this with some sort of functions? And not getters?\r\n\tlet bundles = getbundles(nodes);\r\n\tlet levels = getlevels(nodes, bundles);\r\n\t\r\n\t\r\n\t// First order the bundles within hte levels.\r\n\tlevels.forEach(level=>arrangeBundlesOfLevel(level.bundles)); // forEach\r\n\t\r\n\t\r\n\t// ASSIGN INCOMING/OUTGOING INDICES TO LINES.\r\n\tnodes.forEach(node=>arrangeIncomingOutgoingTracks(node, bundles)); // forEach\r\n  \r\n\t\r\n\t// Last thing is to position the nodes.\r\n\tlet x_offset = 0;\r\n\tlevels.forEach(level=>{\r\n\t\t\t\t\t\t\t\t\r\n\t\t// Recalculate the minimum node positions.\r\n\t\tlevel.bundles.forEach(b=>b.updateNodeMinPositions());\r\n\t\t\r\n\t\t// Now sort the nodes by their miny to conserve as much space as possible.\r\n\t\tlevel.nodes.sort((a,b)=>{\r\n\t\t\treturn a.miny - b.miny\r\n\t\t}) // sort\r\n\t\t\r\n\t\t// With the sizes of the nodes defined, the x and y locations can be assigned. The x location depends on the level, and the y location on the order within hte level.\r\n\t\tx_offset += level.width;\r\n\t\tlet y_offset = 0;\r\n\t\tlevel.nodes.forEach(n=>{\r\n\r\n\t\t\tn.x = x_offset;\r\n\t\t\tn.y = y_offset;\r\n\t\t\r\n\t\t\t// Compute offset for next node. This is just offset within the level!\r\n\t\t\ty_offset = n.y + n.markersize + n.pitch\r\n\t\t}) // forEach\r\n\t}) // forEach\r\n\r\n\treturn {\r\n\t\tnodes: nodes,\r\n\t\tbundles: bundles\r\n\t}\r\n} // dimensioning\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { svg2element } from \"./helpers.js\";\r\n\r\n\r\n\t\r\n// d, node=>node.path\r\n// text -> \t\"x\", node => node.labelx, \"y\", node => node.labely, label node=>node.label\r\nlet template = `\r\n<g class=\"node\" cursor=\"pointer\">\r\n  <g class=\"marker\">\r\n    <path class=\"outline\" stroke=\"black\" stroke-width=\"8\" stroke-linecap=\"round\"></path>\r\n    <path class=\"fill\" stroke=\"white\" stroke-width=\"4\" stroke-linecap=\"round\"></path>\r\n  </g>\r\n  <g class=\"label\">\r\n    <text class=\"unselectable\" stroke=\"white\" stroke-width=\"2\" font-size=\"10px\"></text>\r\n    <text class=\"unselectable\" stroke=\"black\" stroke-width=\"0.5\" font-size=\"10px\"></text>\r\n  </g>\r\n</g>\r\n`; // template\r\n\r\n// A treenode object is a higher level wrapper that contains all the dimensioning information. The `connections' attribute is supposed to hold the `treegroup' object, which contains a reference the an individual group, all it's ancestors, it's direct parents, and all its descendants.\r\nexport default class TreeNode{\r\n\tx = undefined\r\n\t_y = 0\r\n\tminy = 0\r\n\t\r\n\t// Line width is the width of the incoming line. The pitch is the vertical spacing to the next node.\r\n\tline_width = 4\r\n\tpitch = 32\r\n\t\r\n\tnbundlesin = 0\r\n\tnbundlesout = 0\r\n\t\r\n\thidden = false;\r\n\t\r\n\tconstructor(treegroup){\r\n\t\tlet obj = this;\r\n\t\tobj.node = svg2element( template );\r\n\t\t// The treegroup holds all the connections of a particular group.\r\n\t\tobj.connections = treegroup;\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tlet label = obj.node.querySelector(\"g.label\");\r\n\t\tlabel.onmouseenter = function(){ obj.highlighttext(true) }\r\n\t\tlabel.onmouseleave = function(){ obj.highlighttext(false) }\r\n\t\t\r\n\t\tlet marker = obj.node.querySelector(\"g.marker\");\r\n\t\tmarker.onmouseenter = function(){ obj.highlightmarker(true) }\r\n\t\tmarker.onmouseleave = function(){ obj.highlightmarker(false) }\r\n\t} // constructor\t\r\n\t\r\n\t\r\n\tupdate(){\r\n\t    let obj = this;\r\n\t\t\r\n\t\tlet marker = obj.node.querySelector(\"g.marker\");\r\n\t\tlet paths = marker.querySelectorAll(\"path\");\r\n\t\t\r\n\t\tlet label = obj.node.querySelector(\"g.label\");\r\n\t\tlet texts = label.querySelectorAll(\"text\");\r\n\t\t\r\n\t\t\r\n\t\tfor(let i=0; i<paths.length; i++){\r\n\t\t\tpaths[i].setAttribute(\"d\", `M${ obj.x } ${ obj.yMarkerStart } L${ obj.x } ${ obj.yMarkerStart + obj.markersize }`)\r\n\t\t} // for\r\n\t\t\r\n\t\tlabel.setAttribute(\"transform\", `translate(${obj.labelx}, ${obj.labely})`);\r\n\t\tfor(let i=0; i<texts.length; i++){\r\n\t\t\ttexts[i].innerHTML = obj.label;\r\n\t\t} // for\r\n\t} // update\r\n\t\r\n\t\r\n\thighlighttext(v){\r\n\t\tlet obj = this;\r\n\t\tlet size = v ? \"12px\" : \"10px\";\r\n\t\tlet texts = obj.node.querySelector(\"g.label\").querySelectorAll(\"text\");\r\n\t\tfor(let i=0; i<texts.length; i++){\r\n\t\t\ttexts[i].setAttribute(\"font-size\", size);\r\n\t\t} // for\r\n\t} // highlighttext\r\n\t\r\n\thighlightmarker(v){\r\n\t\tlet obj = this;\r\n\t\tlet size = v ? 10 : 8;\r\n\t\tlet outline = obj.node.querySelector(\"g.marker\").querySelector(\"path.outline\");\r\n\t\toutline.setAttribute(\"stroke-width\", size);\r\n\t\t\r\n\t} // highlighttext\r\n\t\r\n\tclear(){\r\n\t\tlet obj = this;\r\n\t\tobj.x = undefined;\r\n\t\tobj._y = 0;\r\n\t\tobj.miny = 0;\r\n\t\tobj.nbundlesin = 0;\r\n\t\tobj.nbundlesout = 0;\r\n\t} // clear\r\n\t\r\n\t\r\n\r\n\tset y(val){\r\n\t\tlet obj = this;\r\n\t\tobj._y = val\r\n\t} // set y\r\n\t\r\n\tget y(){\r\n\t\tlet obj = this;\r\n\t\treturn Math.max(obj._y, obj.miny)\r\n\t} // get y\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tget yMarkerStart(){\r\n\t\tlet obj = this;\r\n\t\tlet yoffset = obj.markersize > 0 ? obj.line_width/2 : 0;\r\n\t\treturn obj.y - obj.markersize/2 + yoffset;\r\n\t} // markery\r\n\t\r\n\tget markersize(){\r\n\t\treturn Math.max(this.nbundlesin-1, this.nbundlesout-1, 0)*this.line_width;\r\n\t} // markersize\r\n\t\r\n\tget markerEmptyIn(){\r\n\t\t// If the marker is larger than the width of the lines coming in, then the lines should be centered in hte middle of the marker. Calculate the empty space from hte marker start to where the lines should begin.\r\n\t\tlet obj = this;\r\n\t\treturn (obj.markersize - (obj.nbundlesin-1)*obj.line_width) / 2;\r\n\t} // markerEmptyIn\r\n\t\r\n\tget markerEmptyOut(){\r\n\t\tlet obj = this;\r\n\t\treturn (obj.markersize - (obj.nbundlesout-1)*obj.line_width) / 2;\r\n\t} // markerEmptyIn\r\n\t\r\n\t\r\n\t\r\n\t// Label to be displayed next to it. Shouldn't be larger than the node_label_width.\r\n\tget label(){\r\n\t\tlet obj = this;\r\n\t\tlet name = obj.connections.group.tags[0].label;\r\n\t\t\r\n\t\t// Temporarily changed to show n tasks for troubleshooting.\r\n\t\t// let n = obj.connections.descendants.length;\r\n\t\tlet n = obj.connections.group.members.length;\r\n\t\treturn `${name} ${n > 0 ? `(${ n })`: \"\"}`\r\n\t} // label\r\n\t\r\n\tget labelx(){\r\n\t\treturn this.x + 4;\r\n\t} // labelx\r\n\t\r\n\tget labely(){\r\n\t\treturn this.yMarkerStart - 4;\r\n\t} // labely\r\n\t\r\n\t\r\n\t\r\n} // TreeNode\r\n\r\n","import {arrayEqual, arrayIncludesAll} from \"./helpers.js\";\r\n/*\r\nIf all the tasks are in the same array, and the author information is on the tags, then the partial trees won;t be a problem.\r\n\r\nEvery tag represents a group possibility essentially. But the same tag can relate to different groups. The group members differentiate the groups. The different tag descriptions of the groups should all be presented on mouseover, maybe along with the author data.\r\n\r\nWon't be able to remove the initial dialogue in the small multiples visualisation, but I will be able to get rid of the expand button on the small multiples.\r\n*/\r\n\r\n\r\n// THIS ONE SHOULD CREATE THE NODES, LEVELS, and BUNDLES.\r\n\r\n// FROM A DEFINED TREE TO AN ARRAY. TAG AND TASK ONLY USED BY TREE2ARRAY!\r\nclass tag{\r\n\tconstructor(id, author, timestamp){\r\n\t\tlet obj = this;\r\n\t\tobj.id = id;\r\n\t\tobj.author = author;\r\n\t\tobj.timestamp = timestamp;\r\n\t} // constructor\r\n} // tag\r\n\r\nclass task{\r\n\tconstructor(id){\r\n\t\tlet obj = this;\r\n\t\tobj.id = id;\r\n\t\tobj.tags = []\r\n\t} // constructor\r\n\t\r\n\taddtag(id, author, timestamp){\r\n\t\tlet obj = this;\r\n\t\t// Implement a check to see if this tag is already there.\r\n\t\tobj.tags.push( new tag(id,author,timestamp) )\r\n\t} // addtag\r\n} // task\r\n\r\nexport function tree2array(trees){\r\n\t// Convert the tree data structure to an array of tasks in which the level nodes are expressed only as tags.\r\n\t\r\n\t// Create a dictionary that points from taskIds to the task objects.\r\n\tlet dict = {};\r\n\t\r\n\tlet A = [];\r\n\t\r\n\ttrees.forEach(tree=>{\r\n\t\ttree.nodes.forEach(node=>{\r\n\t\t\tnode.tasks.forEach(taskId=>{\r\n\t\t\t\t\r\n\t\t\t\t// Create a new object and add it to both teh dictionary and the array. The dictionary is just an internal utility, and the array is the output.\r\n\t\t\t\tif(!dict[taskId]){\r\n\t\t\t\t\tdict[taskId] = new task(taskId);\r\n\t\t\t\t\tA.push(dict[taskId])\r\n\t\t\t\t} // if\r\n\t\t\t\tlet taskobj = dict[taskId];\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\ttaskobj.addtag(node.id, tree.author, \"\")\r\n\t\t\t\t\r\n\t\t\t}) // forEach\r\n\t\t}) // forEach\r\n\t}) // forEach\r\n\t\r\n\t\r\n\treturn A\r\n\t\r\n} // tree2array\r\n\r\n// DONT LOOK ABOVE!!\r\n\r\n\r\n\r\n\r\n\r\n\r\n// FROM AN ARRAY OF TASKS WITH TAGS TO A TREE\r\n\r\n\r\nexport function array2tree(array){\r\n\t/*\r\n\t1.) Find groups.\r\n\t2.) Merge them.\r\n\t3.) Create parent-child relationships\r\n\t*/\r\n\t\r\n\t// Find all created groups, and merge the ones with identical members.\r\n\tlet groups = findAllTagBasedGroups(array);\r\n\tlet mergedgroups = mergeIdenticalGroups(groups);\r\n\t\r\n\t// Convert the groups into a higher level object to avoid circular references when figuring out ancestry.\r\n\tlet hierarchicalnodes = findParentalRelationships(mergedgroups);\r\n\t\r\n\treturn hierarchicalnodes\r\n\t\r\n} // array2tree\r\n\r\n\r\n// The tree node represents a single group, but also holds references to the parent and child nodes. The treenode is a higher level object to avoid circular referencing of objects.\r\nclass treegroup{\r\n\tconstructor(taskgroup){\r\n\t\tlet obj = this;\r\n\t\t\r\n\t\tobj.group = taskgroup;\r\n\t\t\r\n\t\t// Groups CAN have more than 1 parent. While it's true that during a single dive through the tasks each group can only have one parent, it's possible that additional dives (by the same, or other users) will produce the same groups, but tracing different steps. The merging already combines all identical groups, so the merged groups can have multiple parents.\r\n\t\t// Select the parents as all those candidate  groups that have not been referenced by other candidate groups already.\r\n\t\tobj.ancestors = []; // All upstream groups\r\n\t\tobj.parents = []; // Only groups directly above this one.\r\n\t\t\r\n\t\tobj.descendants = []; // All downstream groups\r\n\t\tobj.children = undefined; // Only groups directly below. Is this needed??\r\n\t} // constructor\r\n} // treegroup\r\n\r\nclass taskgroup{\r\n\tconstructor(tags){\r\n\t\tthis.tags = tags;\r\n\t\tthis.members = [];\r\n\t} // constructor\r\n\t\r\n\taddtask(task){\r\n\t\tlet obj = this;\r\n\t\tif(!obj.members.includes(task)){\r\n\t\t\tobj.members.push(task);\r\n\t\t} // if\r\n\t} // addtask\r\n\t\r\n\taddtags(tags){\r\n\t\tlet obj = this;\r\n\t\ttags.forEach(tag=>{\r\n\t\t\tif(!obj.tags.includes(tag)){\r\n\t\t\t\tobj.tags.push(tag);\r\n\t\t\t} // if\r\n\t\t}) // forEach\r\n\t} // addtags\r\n} // group\r\n\r\n\r\n\r\n// Making groups.\r\nfunction findAllTagBasedGroups(array){\r\n\t\r\n\t// Create a group for each tag present in the array. We also need to differentiate teh groups by the author at this point. Otherwise parallel trees won't be possible.\r\n\tlet dict = {};\r\n\tlet groups = [];\r\n\t\r\n\tarray.forEach(tag=>{\r\n\t\t// If you tag something in the session, then that tag is reserved for a particular group. If you tag other elements with it, it'll become a part of that group.\r\n\t\tlet groupid = [tag.label, tag.author].join(\"-\");\r\n\t\tif(!dict[groupid]){\r\n\t\t\t// Here just pass the tag in. The group will need to hold on to it.\r\n\t\t\tdict[groupid] = new taskgroup([tag]);\r\n\t\t\tgroups.push(dict[groupid]);\r\n\t\t} // if\r\n\t\t\r\n\t\t// Add teh task to the specific group, but also to the root group.\r\n\t\tdict[groupid].addtask(tag.taskId)\r\n\t}) // forEach\r\n\t\r\n\t\r\n\t\r\n\t// A root group should be present. It will be merged with other existing groups if possible in hte next tep.\r\n\tlet root = makeRootGroup(array);\r\n\t\r\n\r\n\treturn groups.concat(root);\r\n\t\r\n} // findAllTagBasedGroups\r\n\r\n\r\n\r\nfunction makeRootGroup(array){\r\n\t\r\n\t// The root MUST always contain all of the data!! It will also allow navigation all the way to the start.\r\n\tlet root = new taskgroup([{id: \"Root\", label: \"Root\", author: \"session\", timestamp: new Date()}]);\r\n\t\r\n\t// Root should contain all tasks.\r\n\tarray.forEach(tag=>{\r\n\t\troot.addtask(tag.taskId);\r\n\t}) // forEach\r\n\t\r\n\treturn root\r\n\t\r\n} // makeRootGroup\r\n\r\nfunction mergeIdenticalGroups(groups){\r\n\t\r\n\tlet mergedgroups = groups.reduce((acc,g)=>{\r\n\t\t// Find group with identical members.\r\n\t\tlet identicalg = acc.filter(g_=>{\r\n\t\t\treturn arrayEqual(g_.members, g.members)\r\n\t\t}) // filter\r\n\t\t\r\n\t\tif(identicalg.length > 0){\r\n\t\t\t// Add another author to existing group.\r\n\t\t\tidenticalg[0].addtags(g.tags);\r\n\t\t} else {\r\n\t\t\t// Add this group to the unique ones.\r\n\t\t\tacc = acc.concat(g);\r\n\t\t} // if\r\n\t\t\r\n\t\treturn acc\r\n\t},[]) // reduce\r\n\t\r\n\treturn mergedgroups\r\n\t\r\n} // mergeIdenticalGroups\r\n\r\nfunction isSubset(a,b){\r\n\t// Check whether array a is a subset of array b.\r\n\t\r\n\t// A must be strictly smaller than b.\r\n\tif(a.length < b.length){\r\n\t\t// Check if b contains all of a.\r\n\t\treturn arrayIncludesAll(b, a);\r\n\t} else {\r\n\t\treturn false;\r\n\t} // if\r\n\t\r\n} // isSubset\r\n\r\nfunction findParentalRelationships(groups){\r\n\t\r\n\t\r\n\t// First create an object one level above to avoid cross referenceing of objects.\r\n\tlet nodes = groups.map(g=>{return new treegroup(g)});\r\n\t\r\n\t// maybe calculate all ancestors, all descendants, and then parents and children? Could be useful to have all hte information available.\r\n\t\r\n\t\r\n\t// FIND PARENT CANDIDATES FOR ALL GROUPS.\r\n\tnodes.forEach(node=>{\r\n\t\t// Ancestor groups are all groups that include all of the members of the node group, but are larger than it.\r\n\t\tnode.ancestors = groups.filter(g=>{\r\n\t\t\treturn isSubset(node.group.members, g.members)\r\n\t\t}) // filter\r\n\t\t\r\n\t\t\r\n\t\t// Descendant groups are all groups that contain a subset of the members of this group.\r\n\t\tnode.descendants = groups.filter(g=>{\r\n\t\t\treturn isSubset(g.members, node.group.members)\r\n\t\t});\r\n\t}) // forEach\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t// Groups CAN have more than 1 parent. While it's true that during a single dive through the tasks each group can only have one parent, it's possible that additional dives (by the same, or other users) will produce the same groups, but tracing different steps. The merging already combines all identical groups, so the merged groups can have multiple parents.\r\n\t// Select the parents as all those candidate  groups that have not been referenced by other candidate groups already.\r\n\t\r\n\t\r\n\t\r\n\t// Loop over all the candidates of a particular group, and remove all candidates that appear in that.\r\n\tnodes.forEach(node=>{\r\n\t\tnode.parents = node.ancestors;\r\n\t\t// All parents of a candidate parent are considered `grandparents'. All grandparents cannot be the parent. Loop over the candidates and remove all grandparents. Candidates also include teh candidates parents, so the whole lineage is checked.\r\n\t\tnode.parents.forEach(candidate=>{\r\n\t\t\t\r\n\t\t\t// The candidate now no longer has parents. Just check directly? If another group contains all the members of a group then it is its parent.\r\n\t\t\tnode.parents = node.parents.filter(parent=>{\r\n\t\t\t\tif(candidate == parent){\r\n\t\t\t\t\t// A candidate can't eliminate himself.\r\n\t\t\t\t\treturn true\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn !isSubset(candidate.members, parent.members);\r\n\t\t\t\t} // if\r\n\t\t\t}) // filter\r\n\t\t}) // forEach\r\n\t\t\t\r\n\t\t\r\n\t}) // forEach\r\n\t\r\n\treturn nodes\r\n\t\r\n\t\r\n} // findParentalRelationships\r\n\r\n\r\n\r\n\r\nexport function calculateLevelNumbers(nodes){\r\n\t\r\n\t// First clear all the levels and set any root ones.\r\n\tnodes.forEach(node=>{\r\n\t\tnode.level = undefined;\r\n\t\tif(node.connections.parents.length == 0){\r\n\t\t\tnode.level = 0;\r\n\t\t} // if\r\n\t})\r\n\t\r\n\t// Now move through the nodes and check if all parents already had a level assigned. If so the level of the node is max(parents.level) + 1. This must be done until all the nodes have an assigned level.\r\n\t\r\n\t\r\n\tfor(let i=0; i<nodes.length; i++){\r\n\t\t\r\n\t\tlet unassignednodes = nodes.filter(node=>node.level==undefined);\r\n\t\t\r\n\t\tunassignednodes.forEach(node=>{\r\n\t\t\t// All parents must have an assigned level, otherwise skip. Check if any don't have level.\r\n\t\t\tlet parents = node.connections.parents.reduce((acc,parent)=>{\r\n\t\t\t\treturn acc.concat(nodes.filter(node=>node.connections.group == parent))\r\n\t\t\t}, []) // reduce\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif( parents.some(parent=>parent.level==undefined) ){\r\n\t\t\t\t// Some don't have level assigned. Skip.\r\n\t\t\t} else {\r\n\t\t\t\tnode.level = Math.max(...parents.map(parent=>parent.level)) + 1;\r\n\t\t\t} // if\r\n\t\t}) // forEach\r\n\t\t\r\n\t\t\r\n\t\tif(unassignednodes.length == 0){ break; } // if\r\n\t} // for\r\n\t\r\n} // calculateLevelNumbers\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import TreeNode from \"./TreeNode.js\";\r\nimport {array2tree, calculateLevelNumbers} from \"./hierarchy.js\";\r\n\r\nexport default class TreeHierarchy{\r\n  constructor(){\r\n\t  let obj = this;\r\n\t  \r\n\t  obj.data = [];\r\n\t  obj.collapsednodes = [];\r\n\t  \r\n\t  obj.update();\r\n  } // constructor\r\n  \r\n  update(){\r\n\t// Recalculate makes new treenodes. Maybe instead of having hidden nodes just have hidden tasks? And any group that consists only of the hidden tasks is hidden also? That's how the hierarchy creation works anyway.\r\n\t// Nah, just push the togglig to the node itself! However, anytime that the data will be recalculated the hidden aspect will disappear....\r\n\tlet obj = this;\r\n\tobj.nodes = array2tree(obj.data).map(group=>{\r\n\t\treturn new TreeNode(group);\r\n\t}); // map\r\n  } // update\r\n  \r\n  get visiblenodes(){\r\n\tlet obj = this;\r\n\t\r\n\tlet collapsednodes = obj.nodes.filter(node=>node.hidden);\r\n\t\r\n\t// Based on the collapsed nodes determine which ones are still visible. I can ignore any incorrect nodes here. But I would rather just get rid of them.\r\n\tlet hiddennodes = obj.nodes.filter(node=>{\r\n\t\treturn collapsednodes.some(collapsed=>{\r\n\t\t\treturn collapsed.connections.descendants.includes(node.connections.group)\r\n\t\t}) // some\r\n\t}) // filter\r\n\t\t\r\n\t// Filter out any disabled nodes. Maybe this can be made more sophisticated so that the folds further down the line are preserved?\r\n\tlet nodes = obj.nodes.filter(node=>{\r\n\t\treturn !hiddennodes.includes(node)\r\n\t});\r\n\t\t\r\n\r\n\t// The level numbers should be assigned to all active nodes.\r\n\tcalculateLevelNumbers(nodes);\r\n\t\t\r\n\t\t\r\n\treturn nodes\r\n  } // get nodes\r\n} // TreeHierarchy\r\n\r\n\r\n\r\n// HELPERS\r\n","// Move the hierarchy to CORE!!\r\nimport { dimensioning } from \"./dimensioning.js\";\r\nimport TreeHierarchy from \"./TreeHierarchy.js\";\r\n\r\nimport {svg2element, joinDataToElements, scaleCategorical} from \"./helpers.js\";\r\n\r\n\r\n\r\n/* TODO\r\n- Connect to a scatter plot for interactive tag addition.\r\n- Handle unassigned tasks.\r\n*/\r\n\r\n/* ADVANCED\r\n- Single parent bundles should allow for straight links too.\r\n\r\n- How to display very large trees?\r\n\tMake the tree zoomable?\r\n\r\n- How should the group descriptions be presented? \r\n\tNumber of tasks, number of children, text description, AUTHOR!! All the data is available. Maybe on text hover all the information should be displayed?? Maybe in a tooltip?\r\n- Which label to select when making nodes?\r\n\tThe current author should be allowed to control their branch. This would require some differentiation between users. Certainly can't be done now. For now just select the first one?\r\n- How to merge the groups interactively? I.e. a git pull.\r\n*/\r\n\r\n/* DONE\r\n- Collapsible nodes - collapse, with the folding history saved.\r\n- Enforce partial branches to be inserted - tree created on bundle level.\r\n- Make text unselectable - add into app css\r\n- Fix node mouseover css - css affects specific child of mover g.\r\n*/\r\n\r\n\r\n\r\n\r\nlet template = `\r\n<g transform=\"translate(20, 20)\">\r\n  <g class=\"bundles\"></g>\r\n  <g class=\"nodes\"></g>\r\n  <g class=\"nodetooltip\"></g>\r\n  <g class=\"linktooltip\"></g>\r\n</g>\r\n`;\r\n\r\n\r\n\r\nexport default class TreeRender {\r\n\tconstructor(){\r\n\t\tlet obj = this;\r\n\t\t\r\n\t\t// Hierarchy\r\n\t\tobj.hierarchy = new TreeHierarchy();\r\n\t\t\r\n\t\t\r\n\t\t// Drawing\r\n\t\tobj.node = svg2element( template );\r\n\t\tobj.gnodes = obj.node.querySelector(\"g.nodes\");\r\n\t\tobj.gbundles = obj.node.querySelector(\"g.bundles\");\r\n\t\t\r\n\t\tobj.color = new scaleCategorical();\r\n\t\t\r\n\t} // constructor\r\n\t\r\n\tclear(){\r\n\t\t// When clearing by looping through .children and .remove() it only removed the nodes in the last step. When redrawing it added all of them back somehow...\r\n\t\tlet obj = this;\r\n\t\tobj.gnodes.innerHTML = \"\";\r\n\t\tobj.gbundles.innerHTML = \"\";\r\n\t} // clear\r\n\t\r\n\tinteract(){\r\n\t\tlet obj = this;\r\n\t\tobj.clear();\r\n\t\tobj.map = dimensioning( obj.hierarchy.visiblenodes );\r\n\t\tobj.updatenodes();\r\n\t\tobj.updatelines();\r\n\t} // interact\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tupdate(){\r\n\t\tlet obj = this;\r\n\t\tobj.hierarchy.update();\r\n\t\tobj.interact();\r\n\t} // update\r\n\t\r\n\t// The functionality is added in here. Maybe refactor to remove the nestedness??\r\n\tupdatenodes(){\r\n\t\tlet obj = this\r\n\t\t\r\n\t\tobj.map.nodes.forEach(nodeobj=>{\r\n\t\t\t\r\n\t\t\tobj.gnodes.appendChild( nodeobj.node );\r\n\t\t\tnodeobj.update();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Add teh styling changes on mouseover. Clicking the label moves view to the group.\r\n\t\t\tnodeobj.node.querySelector(\"g.label\").onclick = function(){ \r\n\t\t\t\tobj.moveto(nodeobj) \r\n\t\t\t} // onclick\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Clicking on hte node just collapses branches.\r\n\t\t\tnodeobj.node.querySelector(\"g.marker\").onclick = function(){\r\n\t\t\t\tnodeobj.hidden = !nodeobj.hidden;\r\n\t\t\t\tobj.interact();\r\n\t\t\t} // onclick\r\n\r\n\t\t}) // forEach\r\n\t\t\r\n\t} // updatenodes\r\n\t\r\n\t\r\n\tupdatelines(){\r\n\t\tlet obj = this;\r\n\t\t\r\n\t\t// The renderer controls the color of the lines!!\r\n\t\tobj.map.bundles.forEach(bundleobj=>{\r\n\t\t\tobj.gbundles.appendChild( bundleobj.node )\r\n\t\t\tbundleobj.update( obj.color.dom2range(bundleobj.author) )\r\n\t\t}) // forEach\r\n\t} // updatelines\r\n\t\r\n\tmoveto(nodeobj){\r\n\t\t// I want to move to the group which contains only tasks given by \"nodeobj.connections.group.members\", but I also want to show all the groups within that grop.\r\n\t\tconsole.log(\"Move to\", nodeobj.connections.group.members)\r\n\t} // moveto\r\n\t\r\n} // TreeRender","export function html2element(html){\r\n  let template = document.createElement('template'); \r\n  template.innerHTML = html.trim(); // Never return a text node of whitespace as the result\r\n  return template.content.firstChild;\r\n} // html2element\r\n\r\nexport function svg2element(svg){\r\n  let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n  g.innerHTML = svg.trim();\r\n  return g.firstChild;\r\n} // svg2element\r\n\r\n\r\nexport class scaleLinear {\r\n  \r\n  _domain = [0, 1]\r\n  _range = [0, 1]\r\n\r\n  set domain(d){ this._domain = d } // domain\r\n  get domain(){ return this._domain } // domain\r\n\r\n  set range(r){ this._range = r } // range\r\n  get range(){ return this._range } // range\r\n\r\n  dom2range(v){\r\n\treturn mapSpaceAValueToSpaceB(v, this.domain, this.range)\r\n  } // dom2range\r\n  \r\n  range2dom(v){\r\n\treturn mapSpaceAValueToSpaceB(v, this.range, this.domain)  \r\n  } // range2dom\r\n} // scaleLinear\r\n\r\nfunction mapSpaceAValueToSpaceB(v, A, B){\r\n\treturn (v-A[0])/(A[1]-A[0]) * (B[1]-B[0]) + B[0]\r\n} // mapSpaceAValueToSpaceB","import {html2element} from \"./helpers.js\";\r\n\r\n// This class should just act as an UI and it should use the constituent items for the actual drawing.\r\n// The main difficulty with this is drawing the standard deviation plot. How would that look like in 3D anyway?\r\n\r\nlet template = `\r\n<div class=\"item item-group\" style=\"position: absolute;\">\r\n  <div class=\"label\">\r\n    Group\r\n\t<button class=\"ungroup\" style=\"float: right; background-color: white; border: none; color: gainsboro;\"><i class=\"fa fa-times\" style=\"font-size: 20px;\"></i></button>\r\n  </div>\r\n  <div class=\"view\" style=\"width:300px; height:200px; opacity:0.001;\">\r\n  </div>\r\n</div>\r\n`; // template\r\n\r\n\r\n// When made it should have a series of squares, which when moused over will move between the individual items. Where should these controls be placed though? How should the title be made visible?\r\n// Maybe controls should be above, and the name should change? Then the comments can always be below. Should there be a comment section for all of them at once? I guess so, so that they can all be characterised together.\r\n// Ok, comment sections can be turned off - only the playbar is needed! It also needs a way to remove the group alltogether. A cross in the right top.\r\n\r\nexport default class Group{\r\n  constructor(members){\r\n\tlet obj = this;\r\n\tobj.node = html2element(template);\r\n\tobj.members = members;\r\n\t\r\n\t// Calculate where the node should be added:\r\n\tlet n = obj.members.length;\r\n\tobj.pos = obj.members.reduce((acc, item)=>{\r\n\t\tlet p = [parseInt( item.node.style.left ), parseInt( item.node.style.top )]\r\n\t\tacc.group[0] += p[0]/n;\r\n\t\tacc.group[1] += p[1]/n;\r\n\t\tacc.items.push(p);\r\n\t\treturn acc\r\n\t}, {group: [0,0], items: []})\r\n\t\r\n\tobj.node.style.left = obj.pos.group[0] + \"px\";\r\n\tobj.node.style.top = obj.pos.group[1] + \"px\";\r\n\t\r\n\t// All the members should also be moved to this position. Turn off their uis, wih the exception of the playbar. Also remember their relative positions?\r\n\tobj.members.forEach(item=>{\r\n\t\titem.node.style.left = obj.pos.group[0] + \"px\";\r\n\t\titem.node.style.top = obj.pos.group[1] + \"px\";\r\n\t\t\r\n\t\titem.ui.chapterform.node.style.display = \"none\";\r\n\t\titem.ui.commenting.node.style.display = \"none\";\r\n\t}) // forEach\r\n\t\r\n\t\r\n\t// Removal of the group.\r\n\tobj.node.querySelector(\"button.ungroup\").onclick = function(){\r\n\t  obj.node.remove();\r\n\t\t\r\n\t  // Redistribute the items according to their original positions.`\t\r\n\t\t\r\n\t  obj.members.forEach((item, i)=>{\r\n\t\titem.node.style.left = obj.pos.items[i][0] + \"px\";\r\n\t    item.node.style.top = obj.pos.items[i][1] + \"px\";\r\n\t\t\r\n\t\titem.ui.chapterform.node.style.display = \"\";\r\n\t\titem.ui.commenting.node.style.display = \"\";\r\n\t  })\r\n\t} // onclick\r\n\t\r\n  } // constructor\r\n  \r\n  remove(){\r\n\t  // All the members should be made visible again, and their comment sections should be turned back on, and they should be staggered to their relative psitions.\r\n\t  let obj = this;\r\n\t  \r\n\t  obj.members.forEach(item=>{\r\n\t\titem.ui.chapterform.node.style.display = \"\";\r\n\t\titem.ui.commenting.node.style.display = \"\";\r\n\t  }) // forEach\r\n\t  \r\n\t  obj.node.remove();\r\n  } // remove\r\n} // Group","import { addDraggingToSiblingItems, addDraggingToItem } from \"./dragging.js\";\r\nimport { html2element, arrayIncludesAll } from \"./treenavigation/helpers.js\"\r\nimport TreeRender from \"./treenavigation/TreeRender.js\";\r\nimport Group from \"./Group.js\";\r\n\r\n/* \r\nMake a class that will be able to perform most coordination tasks required for the spatial harnessing. This involves getting and setting the coordinates of the small multiples.\r\n\r\n\r\nShould groups allow the user to enter them? Maybe its simpler to restrict the navigation solely to the navigation tree. Otherwise when clicking on a group node it has to communicate to the GroupingCoordinator to initiate the change, and also keep track of the descendant groups.\r\n\r\nIf navigation is constrained to the navigation tree, then groups can just be an array of arrays of tasks. Maybe the navigation trre should be controlled from within here? And then the hierarchy can be used to create the groups on the go?\r\n\t\r\n\r\n*/\r\nlet template = `<div></div>`; // template\r\n\r\nexport default class GroupingCoordinator {\r\n  constructor(items){\r\n    let obj = this;\r\n\tobj.node = html2element( template );\r\n\tobj.items = items;\r\n\tobj.tasks = items.map(item=>item.ui.metadata.taskId);\r\n\tobj.groups = [];\r\n\t\r\n\t// First the items need to be draggable to allow for grouping.\r\n\taddDraggingToSiblingItems(items, 80);\r\n\t\r\n\t\r\n\t// The hierarchy is essentially a function of the grouping. The navigation tree can therefore be used to create teh grouping interface.\r\n\tobj.navigation = new TreeRender([]);\r\n\t// navigationsvg.appendChild(obj.navigation.node)\r\n\t// obj.navigation.update();\r\n\t\r\n\tobj.navigation.moveto = function(nodeobj){\r\n\t\t// Now remove all existing group items, hide all unnecessary items, calculate the direct descendant groups, and create items for them.\r\n\t\tlet current = nodeobj.connections.group.members;\r\n\t\t\r\n\t\tobj.clear();\r\n\t\tobj.showCurrentTasks( current );\r\n\t\tobj.makeDirectDescendantGroups(nodeobj);\r\n\t\t\r\n\t\tconsole.log(\"Move to\", nodeobj )\r\n\t} // moveto\r\n\r\n\t\r\n\t\r\n\t// Allow the current makeup to be communicated from outside. So a number of groups can be passed into here, and the groups for them should be created. The groups can be simply the taskids. Task ids are better than view ids because they allow groups to be carried over between slices (view ids are slice specific, but allow comments to be specifically targeted.).\r\n\t// So, hte parent group needs to be specified, as well as the child groups.\r\n  } // constructor\r\n  \r\n  \r\n  clear(){\r\n\tlet obj = this;\r\n\tobj.groups.forEach(group=>{\r\n\t\tgroup.remove();\r\n\t})\r\n\tobj.groups = [];\r\n  } // clear\r\n  \r\n  // When the parent group is specified the items should be adjusted immediately.\r\n  showCurrentTasks(tasks){\r\n\tlet obj = this;\r\n\t\r\n\t// First find if any of the specified tsks are valid.\r\n\tlet validtasks = tasks.filter(task=>obj.tasks.includes(task));\r\n\t\r\n\tif(validtasks.length > 0){\r\n\t\tobj.items.forEach(item=>{\r\n\t\t\tif(validtasks.includes(item.ui.metadata.taskId)){\r\n\t\t\t\titem.node.style.display = \"\";\r\n\t\t\t} else {\r\n\t\t\t\titem.node.style.display = \"none\";\r\n\t\t\t} // if\r\n\t\t}) // forEach\r\n\t} // if\r\n  } // showCurrentTasks\r\n  \r\n  \r\n  makeDirectDescendantGroups(nodeobj){\r\n\tlet obj = this;\r\n\t\r\n\tlet descendants = nodeobj.connections.descendants;\r\n\tlet directDescendants = descendants.filter(group=>{\r\n\t\treturn !descendants.some(d=>{\r\n\t\t\tif(d != group){\r\n\t\t\t\treturn arrayIncludesAll(d.members, group.members)\r\n\t\t\t} // if\r\n\t\t\treturn false\r\n\t\t}) // some\r\n\t}) // filter\r\n\t\r\n\t\r\n\tdirectDescendants.forEach(d=>{\r\n\t\t// Pass the actual item objects to the group.\r\n\t\tlet members = obj.items.filter(item=>{\r\n\t\t\treturn d.members.includes(item.ui.metadata.taskId);\r\n\t\t}) // filter\r\n\t\tlet groupitem = new Group(members);\r\n\t\tobj.groups.push( groupitem );\r\n\t\tobj.node.appendChild( groupitem.node );\r\n\t\taddDraggingToItem( groupitem );\r\n\t})\r\n\t\r\n\tconsole.log(obj.groups)\r\n  } // makeDirectDescendantGroups\r\n  \r\n  \r\n  \r\n  getCurrentPositions(items, variable){\r\n    // Current positions are needed for calculating correlations, or for adding additional metadata variables based on the users actions. How should the positions and the metadata be combined actually? Should there be a specific method for it? If a variable is specified, then return it with the positions.\r\n\treturn items.map(item=>{\r\n\t  let pos = [\r\n\t\tParseInt(item.node.style.left), \r\n\t\tParseInt(item.node.style.top)\r\n      ];\r\n\r\n\t  if(variables != undefined){\r\n\t\tpos.push(item.metadata[variable])\r\n\t  } // if\r\n\t  \r\n\t  return pos \r\n\t}) // map\r\n  } // getCurrentPositions\r\n  \r\n  \r\n  \r\n  setPositionsByMetadata(items, variable){\r\n    // Reposition hte items on screen given their metadata values. Reposition to within the current client viewport, or the whole document? Whole document to spread the small multiples out a bit.\r\n\t\r\n\t\r\n\t\r\n\t\r\n  } // setPositionsByMetadata\r\n  \r\n  \r\n  makeGroupFromArrayOfItems(items){\r\n    // Calculate the position of the group and create the html elements required for it. How should the renderer be convinced to draw the appropriate contours? It gets the viewport directly from the ViewFrame, which in this case will be disabled. Allow the group object to pass it's own viewport to the correct item, and use them if the div is set to display none?\r\n\t\r\n\t\r\n  } // makeGroupFromArrayOfItems\r\n  \r\n} // GroupingCoordinator","// Some comments came back from the server side, add them to the views.\r\nfunction sortCommentsBeforePushing(a,b){\r\n\t// The primary comments must be added first so that the replies can be added to them. The comments can just be sorted by time of creation. Replies can only be created after the primary comment.\r\n\treturn Date.parse(a.time)-Date.parse(b.time)\r\n} // sortCommentsBeforePushing\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* \r\nThe knowledge manager handles the loading and uploading of tags (categorical and ordinal), comments, and playbar chapters.\r\n\r\nKnowledge is used for:\r\n  Categorical: navigation tree, correlations\r\n  Ordinal    : correlations\r\n  Comments   : commenting\r\n  Chapters   : navigation tree, playbar, correlation, commenting\r\n\r\nCHAPTERS:\r\nShould chapters persist if the slice is changed? Essentially, are the chapters for the time domain, or time-slice domain? I would argue that several events together explain the underlying mechanisms, and therefore it's useful to see them all at once. Therefore they should persist, and are thus bound by 'taskId'. Each task is only supposed to be one gemoetry at one operational point anyway.\r\n\r\nCOMMENTS:\r\nComments are really supposed to support discussing whatever is currently drawn. Therefore they should be bound to the 'viewId'. This means that comments of one slice will not appear in comments of another. Should it be like this, or should it just appear everywhere? If it appears everywhere for a slice, then it suggests everything has been looked at already. Alternately, it would sometimes be useful to have the comments there.\r\n\r\nCATEGORICAL:\r\nBroad characterisation of the data. 'taskId' based.\r\n\r\nORDINAL:\r\nBroad characterisation of the data. 'taskId' based.\r\n*/\r\n\r\nimport GroupingCoordinator from \"./arrangement/GroupingCoordinator.js\";\r\n\r\nexport default class KnowledgeManager{\r\n  constructor(container, items){\r\n\t// All knowedge must be pushed to individual IPUI (Interactive Player User Interfaces) when received.\r\n\tlet obj = this;\r\n\tobj.container = container;\r\n\tobj.items = items;\r\n\t\r\n\t// Tags and chapters should be available for correlations. Tags and chapters are time invariant, but the metadata IS time variant. So even the metadata needs to be queried!\r\n\t\r\n\t\r\n\t// Add the dragging externally. The tabletop was positioned absolutely, with top: 0px. If this is not so the dragging will move the items on the initial drag start by the offset amount.\r\n\t// The grouping coordinator does: adds dragging, positioning of the items by metadata values, retrieveng position and metadata pairs, grouping, and grouping navigation.\r\n\t// Groups need to be added to the same container as the actual items, otherwise either the items cant be dragged over the groups, or vice versa.\r\n\tobj.grouping = new GroupingCoordinator(items);\r\n\tobj.container.appendChild(obj.grouping.node);\r\n\t\r\n\t\r\n\t/*\r\n\tNew comments must be passed to the stores. Also, when up/downvotes change it should be sent to the server. The local version should also be updated straight away.\r\n\t\r\n\tupvote/downvote are in 'Comment.js';\r\n\treply button onclick is in 'addGeneralComment' of 'CommentingManager.js';\r\n\tsubmit button onclick is in 'constructor' of 'CommentingManager.js';\r\n\t\r\n\tHow to post the comments to the server? Should each individual be able to post itself to the server? Because it will have to post changes on itself, for example up/downvotes. Anyway, can be left for later for now.\r\n\t*/\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t// Make some proxy stores that simulate the communication with the server. Connect them to the points where the annotations are submitted, so that they circulate through the stores.\r\n\tobj.comments = new ProxyServerStore('./data/annotations/testcomments.json');\r\n\tobj.comments.update = function(){\r\n\t\tobj.updateAllComments();\r\n\t}; // update\r\n\t\r\n\tobj.chapters = new ProxyServerStore('./data/annotations/testchapters.json');\r\n\tobj.chapters.update = function(){\r\n\t\tobj.updatePlaybarChapters();\r\n\t}; // update\r\n\t\r\n\tobj.tags = new ProxyServerStore('./data/annotations/testtags.json');\r\n\tobj.tags.update = function(){\r\n\t\tobj.updateTagAnnotations();\r\n\t}; // update\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t// Make the forms submit the annotations to the appropriate stores, which will then in turn update the display modules.\r\n\tobj.items.forEach(item=>{\r\n\t\t\r\n\t  // The chapter annotations should update the playbar, the discussion tags, and the navigation tree.\r\n\t  item.ui.chapterform.submit = function(chapter){\r\n\t\tobj.chapters.add(chapter);\r\n\t  } // submit\r\n\t\t\r\n\t}) // forEach\r\n\t\r\n  } // constructor\r\n  \r\n  updateAllComments(){\r\n\t// Now add in some test comments\r\n    let obj = this;\r\n\t\r\n\tobj.comments.data.sort(sortCommentsBeforePushing).forEach(comment=>{\r\n\t  obj.items.forEach(item=>{\r\n\t    if(item.ui.viewid == comment.viewid){\r\n\t      item.ui.commenting.add(comment);\r\n\t    } // if  \r\n\t  }) // forEach\r\n\t}) // forEach\r\n  } // updateAllComments\r\n  \r\n  updatePlaybarChapters(){\r\n\tlet obj = this;\r\n\t\r\n\tobj.chapters.data.forEach(ch=>{\r\n\t  ch.starttime = ch.starttime ? Number(ch.starttime) : undefined;\r\n\t  ch.endtime   = ch.endtime   ? Number(ch.endtime)   : undefined;\r\n\r\n\t  obj.items.forEach(item=>{\r\n\t\tif(item.ui.metadata.taskId == ch.taskId){\r\n\t\t  item.ui.playcontrols.bar.addchapter(ch);\r\n\t\t} // if  \r\n\t  }) // forEach\r\n\t}) // forEach\r\n\t\r\n  } // updatePlaybarChapters\r\n  \r\n  updateTagAnnotations(){\r\n\tlet obj = this;\r\n\t\r\n\t// Previously the tasks were pushed to the hierarchy, with the tags attached. Now the tags are standalone, and the task ids should be given to the hierarchy separately. Maybe just make them as new tags and merge them together here?\r\n\tlet tasktags = obj.items.map(item=>{return {\r\n\t\ttaskId: item.ui.metadata.taskId, \r\n\t\tlabel: \"Root\", \r\n\t\tauthor: \"session\"\r\n\t}});\r\n\tobj.grouping.navigation.hierarchy.data = tasktags.concat(obj.tags.data);\r\n\tobj.grouping.navigation.update();\r\n\t  \r\n  } // updateTagAnnotations\r\n  \r\n  \r\n} // KnowledgeManager\r\n\r\n\r\n\r\n\r\n\r\nclass ProxyServerStore{\r\n\tconstructor(filename){\r\n\t\tlet obj = this;\r\n\t\tobj.data = [];\r\n\t\t\r\n\t\tfetch(filename)\r\n\t\t  .then(response => response.json())\r\n\t\t  .then(data=>{\r\n\t\t\tobj.data=data;\r\n\t\t\tobj.update();\r\n\t\t\treturn data;\r\n\t\t  });\r\n\t} // constructor\r\n\t\r\n\tadd(item){\r\n\t\t// Check if the item is already present. Replace it, or just update the delta? Bank on the idea that no two queries will be simultaneous?\r\n\t\tlet obj = this;\r\n\t\tlet i = obj.data.findIndex(d=>d.taskId==item.taskId);\r\n\t\tobj.data.splice(i,1,item);\r\n\t\tobj.update();\r\n\t} // add\r\n\t\r\n\tupdate(){\r\n\t\t// Implement the push of all the comments etc to the actual modules for display.\r\n\t} // update\r\n\t\r\n\t// Maybe no query is required anyway? Each project would have its own annotations, which are always loaded anyway? Unless you go into a list of users and remove them?\r\n} // ProxyServerStore","/* To do: \r\n  DONE: - allow scrolling\r\n  DONE: - add style to frames.\r\n  DONE: - make divs appear side by side also\r\n  DONE: - don't update invisible divs\r\n  DONE: - zooming, panning\r\n  \r\n  DONE: - use the actual data\r\n  DONE: - value based color shader calculation\r\n  DONE: - (panning relaxation must be manually adjusted) - 2D and 3D cameras.\r\n  DONE: - auto set the original domain (DONE (width, height), near/far plane)\r\n\r\n  DONE: - dragging frames around\r\n  - auto selecting the height of the viewport in pixels\r\n  - pinch gestures\r\n  - play multiple views at once.\r\n  - loading buffering && data limitation, and subsequent viewframe number limitation.\r\n  \r\n  DONE: - expandable description and tools section?\r\n  DONE: - adding chapter annotations\r\n      The annotations are not really chapters. They can be, but they should also support having a start AND end points, and be allowed to overlap. The playbar san still show them in order of appearance, but a more general view of the tag annotations should be available.\r\n  DONE comments, reintroduce tags as threads\r\n  - spatial arranging and metadata connection\r\n  DONE: - tree hierarchy\r\n\t  Need to still connect the tag adding to update the navigation tree. Maybe in this smaller example it's better to have the tree just under the title?\r\n  - grouping (hierarchy operates on tags, and is thus independent of grouping)\r\n  - lasso\r\n  \r\n  - put it all on a github webpage??\r\n  \r\n*/\r\n\r\n/*\r\n\r\nArranging by metadata: some metadata will change with respect to time. But those will have to be collected on the go - because the players can be navigated to different times. It's easiest to have this metadata attached to the timesteps. This is ok for now.\r\n\r\nUnsteady dbslice: How should the unsteady dbslice handle this data? Should every timestep be a different row in the metadata? Or should unsteady metadata be structured differently, with each attribute being an array of time-value pairs?\r\n\r\n*/\r\n\r\n\r\n\r\n// Hierarchy expects each task object to have some tags. Maybe the metadata should be loaded in from some database, and then converted to an object which includes the tags?\r\nvar metadata = [\r\n{taskId: \"0\", label: \"Maybe we\", slice: \"./data/testmetadata.json\"},\r\n{taskId: \"1\", label: \"should add\", slice: \"./data/testmetadata_copy0.json\"},\r\n{taskId: \"2\", label: \"some more\", slice: \"./data/testmetadata_copy1.json\"},\r\n{taskId: \"3\", label: \"tasks.\", slice: \"./data/testmetadata_copy2.json\"},\r\n] // metadata\r\n\r\n// The actual metadata to use during arrangement etc is stored on the timesteps that are loaded by the individual players. In hte end all the metadata should be in the metadata above, and the players should recieve all the rows that correspond to a single task.\r\nlet ordinal = [\"s\"]\r\n\r\n\r\n\r\nlet canvas = document.getElementById(\"canvas\");\r\nlet container = document.getElementById(\"table-top\");\r\n\r\n// The MeshRenderer implements the frag and color shaders, and runs the main drawing loop.\r\nimport MeshRenderer2D from \"./renderers/MeshRenderer2D.js\";\r\nlet renderer = new MeshRenderer2D(canvas, container);\r\n\r\n// Add the players in. The HTML will position hte frames.\r\nfor(let i=0; i<4; i++){\r\n\tlet m = metadata[i];\r\n\t// Player is added within the MeshRenderer because it needs the 'gl'.\r\n\tlet p = renderer.add(m.slice);\r\n\tp.title(m.label);\r\n\tp.ui.metadata = m;\r\n} // for\r\n\r\n// The renderer starts updating straight away. It's the responsibility of the geometries to provide something to draw. In the end some initial geometry is provided as default, as the buffers are initialised straight away.\r\nrenderer.draw()\r\nconsole.log(renderer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Knowledge manager handles the communication with the server, the updating of the relevant modules, and the grouping, navigation, and spatial arrangement.\r\nimport KnowledgeManager from \"./components/KnowledgeManager.js\";\r\nlet km = new KnowledgeManager( container, renderer.items );\r\n\r\n// Add the treenavigation graphic.\r\ndocument\r\n  .querySelector(\"svg.hud\")\r\n  .querySelector(\"g.tree\")\r\n  .appendChild(km.grouping.navigation.node)\r\nkm.grouping.navigation.update()\r\n\r\nconsole.log(km)\r\n\r\n\r\n// COMMENTING: Add the login info.\r\nlet login = document.querySelector(\"div.login\").querySelector(\"input\");\r\nlogin.oninput = function(){\r\n  renderer.items.forEach(item=>{\r\n\titem.ui.user = login.value;\r\n  }) // forEach\r\n} // oninput\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["html2element","html","template","document","createElement","innerHTML","trim","content","firstChild","multiplyMatrices","a","b","result","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","multiplyArrayOfMatrices","matrices","inputMatrix","i","length","scaleMatrix","w","h","d","translateMatrix","x","y","z","invertMatrix","matrix","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","determinant","Error","Camera","mouseDown","mouseStart","theta","phi","xStart","yStart","thetaStart","phiStart","fieldOfViewInRadians","Math","PI","aspectRatio","nearClippingPlaneDistance","farClippingPlaneDistance","obj","diffX","diffY","constrainValue","max","Camera2D","zoomPointClip","k","vpp","undefined","v","min","ViewFrame2D","gl","node","view","querySelector","geometry","domain","transforms","camera","onmousedown","e","cameraMoveStart","onmousemove","cameraMove","onmouseup","cameraMoveEnd","onmouseleave","addEventListener","preventDefault","cameraZoom","passive","dom","kar","translateToOrigin","scaleToClipSpace","translateToScaleSpace","model","projection","position","dx","dy","scaleToZoomSpace","translateToZoomSpace","computeModelMatrix","computeViewMatrix","computeOrthographicMatrix","rect","getBoundingClientRect","width","right","left","height","bottom","top","canvas","clientHeight","arx","viewport","ary","isOnScreen","style","display","isOffScreen","clientWidth","moveStart","clientX","clientY","move","valuePerPixel","moveEnd","pixel2clip","incrementZoomValue","deltaY","p","x_px","y_px","x_clip","y_clip","label","textContent","vertices","indices","values","initdomain","t","Mesh2D","unsteadyMetadataFilename","timesteps","verticesBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","valuesBuffer","indicesBuffer","ELEMENT_ARRAY_BUFFER","Uint32Array","indicesLength","_currentFrameInd","fetch","then","res","json","indicesPromise","loadBinData","ab","verticesPromise","valuesPromise","currentFrameInd","filename","Uint8Array","ui8","from","Promise","all","c_uint","memory","forEach","byteLength","dist","Number","POSITIVE_INFINITY","timestep","j","abs","f32","arrayBuffer","svg2element","svg","g","createElementNS","scaleLinear","_domain","_range","r","mapSpaceAValueToSpaceB","range","A","B","play","sqrt","r_max","dH","Mx","My","p0","p1","p2","pause","PlayButton","playing","setAttribute","defaultRectAttributes","PlayBarAnnotation","config","tscale","dh","background","buffering","foreground","highlight","unhighlight","t_play","t_buffer","dom2range","starttime","timeFraction","x0","x1","endtime","tf","highlightRectangle","unhighlightRectangle","baseVal","value","PlayBar","annotations","t_min","t_max","_tscale","exiting","querySelectorAll","remove","makeChapterObj","chapters","reduce","acc","previous","current","push","map","c","chapter","appendChild","update","tag","findIndex","id","splice","rebuild","PlayControls","textHeight","textBottomMargin","highlightHeightDelta","button","event","bar","range2dom","skipped","_playing","joinDataToElements","data","elements","idAccessor","elementsArray","elementsDataIds","el","__data__","filter","d_","exit","enter","includes","css","textarea","submitbutton","AddCommentForm","_user","viewid","commentinput","oninput","scrollHeight","name","user","author","text","replybutton","votenumberi","timestampspan","Comment","time","Date","upvotes","downvotes","tags","header","innerText","body","footer","onclick","upvote","downvote","join","updateTimestamp","updateVoteCounter","timestamp","now","stamp","parse","dayInMiliseconds","todayInMiliseconds","getDayInMiliseconds","getAgoFormattedString","split","buttonClassName","icon","counter","n","color","pushValueToAWhichCompetesWithB","indexOf","msdate","getHours","getMinutes","getSeconds","getMilliseconds","delta","seconds","floor","minutes","hours","days","ReplyComment","marginLeft","GeneralComment","replies","replynode","repliesExpanded","replyconfig","parentid","existing","findArrayItemById","replaceReply","replacement","container","insertBefore","updateReplies","s","classList","candidates","tagtemplate","DiscussionSelector","selected","newtags","externalAction","buttons","toggle","fontWeight","CommentingManager","comments","form","discussion","add","clear","hideNonDiscussionComments","hsdiv","cdiv","hidden","comment","pertinent","some","counterNode","addReplyComment","addGeneralComment","updateCommentCounter","parent","reply","replaceGeneralComment","timebutton","ChapterForm","input","submit","t0","t1","it0","it1","toFixed","opacity","backgroundColor","taskId","interactivePlayerUI","playcontrols","chapterform","commenting","addchapter","discussiontags","t_domain","_metadata","m","UnsteadyPlayer2D","fps","dt","timelastdraw","ui","InteractivePlayerUI","incrementTimeStep","t_new","timestepCurrentFrame","incrementCurrentFrame","currentTime","updateCurrentFrameBuffer","vertshader","fragshader","cmap","MeshRenderer2D","domcontainer","window","innerWidth","innerHeight","getContext","antialias","depth","getExtension","webglProgram","setupProgram","colormapTexture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","items","performance","transform","scrollY","item","isItemVisible","updateAttributesAndUniforms","updateViewport","drawElements","TRIANGLES","UNSIGNED_INT","requestAnimationFrame","draw","bind","meshMetadataFilename","newplayer","scissor","clearColor","locations","uniformMatrix4fv","enableVertexAttribArray","vertexAttribPointer","FLOAT","uniform1f","cmin","globalColormapRange","cmax","uint_cmin","currentUintRange","uint_cmax","activeTexture","TEXTURE0","uniform1i","colormap","isCovered","higherRect","isRectInHigherRect","NEGATIVE_INFINITY","twgl","program","useProgram","loc_model","getUniformLocation","loc_view","loc_projection","loc_colormap","loc_cmax","loc_cmin","loc_uint_cmax","loc_uint_cmin","loc_position","getAttribLocation","loc_value","enable","SCISSOR_TEST","addDraggingToSiblingItems","headeroffset","positions","offsetLeft","offsetTop","onstart","addDraggingToItem","dragging","active","itemRelativePosition","target","parentNode","pageX","pageY","arrayEqual","arrayIncludesAll","f","scaleCategorical","DrawLink","parentnode","childnode","pi","ci","bendi","node_label_width","bundle_width","line_width","r1","level","r2","dyc","markerEmptyIn","dyp","markerEmptyOut","xHorizontal","origin","yMarkerStart","arc1start","arc1end","arc2start","arc2end","treebundle","seednode","links","_bendi","parents","connections","children","group","nodeChildren","nodeParents","link","paths","path","isNodeAllowed","isNodeUnknown","updateNodeMinPositions","bundles","y_lowest_parent","child","miny","TreeLevel","nodes","nlevel","getBundleLinesGoingThroughNode","bundle","arrangeIncomingOutgoingTracks","outgoingbundles","incomingbundles","sort","lines","line","nbundlesin","nbundlesout","arrangeBundlesOfLevel","maxBundleInd","getbundles","bundleseeds","addchild","TreeBundle","addparent","makelinks","getlevels","levels","maxlevel","dimensioning","x_offset","y_offset","markersize","pitch","TreeNode","treegroup","_y","onmouseenter","highlighttext","marker","highlightmarker","texts","labelx","labely","size","outline","val","yoffset","members","array2tree","array","groups","findAllTagBasedGroups","mergedgroups","mergeIdenticalGroups","hierarchicalnodes","findParentalRelationships","taskgroup","ancestors","descendants","task","dict","groupid","addtask","root","makeRootGroup","concat","identicalg","g_","addtags","isSubset","candidate","calculateLevelNumbers","unassignednodes","TreeHierarchy","collapsednodes","hiddennodes","collapsed","TreeRender","hierarchy","gnodes","gbundles","visiblenodes","updatenodes","updatelines","interact","nodeobj","moveto","bundleobj","console","log","Group","pos","parseInt","GroupingCoordinator","tasks","metadata","navigation","showCurrentTasks","makeDirectDescendantGroups","validtasks","directDescendants","groupitem","variable","ParseInt","variables","sortCommentsBeforePushing","KnowledgeManager","grouping","ProxyServerStore","updateAllComments","updatePlaybarChapters","updateTagAnnotations","ch","tasktags","response","slice","getElementById","renderer","title","km","login"],"mappings":"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"}